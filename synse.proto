syntax = "proto3";

package synse;


service Plugin {

    // Test returns the status of the plugin. This call is intended to
    // be used in order to check if a plugin is reachable. The status
    // returned here designates plugin reachability, not plugin health.
    rpc Test(Empty) returns (Status) {}

    // Version returns the version info for the plugin. This is not used
    // by Synse Server, but can be used by the CLI/manual plugin interaction.
    rpc Version(Empty) returns (VersionInfo) {}

    // Health returns the health status of a plugin.
    rpc Health(Empty) returns (PluginHealth) {}

    // Capabilities returns the collection of capabilities that a plugin
    // exposes. More specifically, this means types of devices supported
    // and the readings supported for each of those devices.
    rpc Capabilities(Empty) returns (stream DeviceCapability) {}

    // Devices gets info for all of the devices that the plugin manages.
    // This rpc call is the plugin's equivalent to a Synse Server scan.
    rpc Devices(DeviceFilter) returns (stream Device) {}

    // Metainfo gets the metainfo for the plugin. This info provides details
    // about the plugin itself.
    rpc Metainfo(DeviceFilter) returns (stream Metadata) {}

    // Read returns the reading data for the specified device.
    rpc Read(DeviceFilter) returns (stream Reading) {}

    // Write issues an asynchronous write command to the specified device.
    rpc Write(WriteInfo) returns (Transactions) {}

    // Transactiong gets the state/status of an asynchronous write transaction.
    rpc Transaction(TransactionFilter) returns (stream WriteResponse) {}
}

// DeviceFilter is a message that specifies the routing information for
// a device. This can also be used as a filter for partial routing info
// by only specifying the rack or the rack+board.
message DeviceFilter {
    // The rack identifier.
    string rack = 1;

    // The board identifier.
    string board = 2;

    // The device identifier.
    string device = 3;
}

// Empty is a message that contains no data.
message Empty {}

// Status is the response of the `Test` rpc call. In general, it should
// always return with the 'ok' field being true.
message Status {
    bool ok = 1;
}

// PluginHealth is the response to the `Health` rpc call. It provides a
// health status summarizing the plugin's health, as well as a list of the
// `HealthCheck`s which make up that status.
message PluginHealth {
    enum Status {
        UNKNOWN = 0;
        OK = 1;
        PARTIALLY_DEGRADED = 3;
        FAILING = 4;
    }

    // The time that the health was checked.
    string timestamp = 1;

    // The overall health status.
    Status status = 2;

    // All the health checks of the plugin that make up the overall health.
    repeated HealthCheck checks = 3;
}

// HealthCheck is an individual health metric that makes up the plugin health.
message HealthCheck {
    // The name of the health check.
    string name = 1;

    // The status of the health check.
    PluginHealth.Status status = 2;

    // Any additional info associated with the health check.
    string message = 3;
}

// DeviceCapability identifies a device kind and the potential kinds of readings
// that it supports.
message DeviceCapability {
    // The kind/type of the device.
    string kind = 1;

    // The outputs that the device supports.
    repeated string outputs = 2;
}

// Metadata is the response to the `Metainfo` rpc call.
message Metadata {
    string name = 1;
    string maintainer = 2;
    string description = 3;
    string vcs = 4;

    VersionInfo version = 5;
}

// VersionInfo is the response to the `Version` rpc call.
message VersionInfo {
    string pluginVersion = 1;
    string sdkVersion = 2;
    string buildDate = 3;
    string gitCommit = 4;
    string gitTag = 5;
    string arch = 6;
    string os = 7;
}

// Reading is the response to the `Read` rpc call.
message Reading {
    // The time which the reading was taken.
    string timestamp = 1;

    // The type of reading.
    string type = 2;

    // Any info associated with the reading.
    string info = 3;

    // The unit of the reading.
    Unit unit = 4;

    // The value of the reading.
    oneof value {
        string string_value  = 5;
        bool   bool_value    = 6;
        float  float32_value = 7;
        double float64_value = 8;
        int32  int32_value   = 9;
        int64  int64_value   = 10;
        bytes  bytes_value   = 11;
        uint32 uint32_value  = 12;
        uint64 uint64_value  = 13;
    }
}

// WriteInfo is the request message for the `Write` rpc call. It specifies a
// filter for the device to write to, as well as actions/data for the write.
message WriteInfo {
    // The specifier for the device to write to.
    DeviceFilter deviceFilter = 1;

    // The data to write to the device.
    repeated WriteData data = 2;
}

// WriteData is the data that gets written on a `Write` rpc call.
message WriteData {
    // The action string for the device write.
    string action = 1;

    // The data to write.
    bytes data = 2;
}

// WriteResponse is the response for a `Transaction` rpc call. It gives the
// status of the transaction. Transactions correspond with write requests.
// Since writes are performed asynchronously, the transaction id is used to
// track the progress of that transaction.
message WriteResponse {

    enum WriteStatus {
        UNKNOWN = 0;
        PENDING = 1;
        WRITING = 2;
        DONE = 3;
    }

    enum WriteState {
        OK = 0;
        ERROR = 1;
    }

    // The time at which the write transaction was created.
    string created = 1;

    // The time at which the write transaction state/status was last updated.
    string updated = 2;

    // The status of the transaction. This describes what stage of processing
    // the transaction is at.
    WriteStatus status = 3;

    // The state of the transaction. This describes the so called "health"
    // of the transaction.
    WriteState state = 4;

    // The message field will be used to specify any context information
    // when the state is ERROR. If the state is OK, this field will
    // remain empty.
    string message = 5;
}

// TransactionFilter is a filter for transaction checks. If its id field is
// set, the plugin will only check the state for that transaction. If the id
// field is empty, the plugin will return the state for all active transactions.
message TransactionFilter {

    // The id of the transaction to check.
    string id = 1;
}

// Transactions specifies the asynchronous transactions for each of the writes
// for a `Write` rpc call. Each transaction identifies a single write action
// with a unique transaction id and context to help identify which transaction
// that id corresponds to.
//
// The transaction id can later be passed back to the `Transaction` rpc call
// to get the status of that write.
message Transactions {

    // A map where the key is the transaction id for a `WriteData` within the
    // `WriteInfo`, and the value is that same `WriteData`, provided as context.
    map<string, WriteData> transactions = 1;
}

// Device is the response to the `Devices` rpc call. It provides all of the
// info that describes a device. This is used by Synse Server for its 'scan'
// and 'info' endpoints.
message Device {
    // The time at which the device info was gathered.
    string timestamp = 1;

    // The unique id for the device.
    string uid = 2;

    // The device kind. This can also be thought of as 'device type'.
    string kind = 3;

    // Any metadata associated with the device.
    map<string,string> metadata = 4;

    // The name of the plugin that the device is managed by.
    string plugin = 5;

    // Any additional information specified for the device.
    string info = 6;

    // The location of the device, as specified by rack and board
    // identifiers.
    Location location = 7;

    // The reading output of the device. This specifies all of the
    // outputs a device can generate when read. Many devices will have
    // a single output, but some devices (e.g. a humidity sensor) could
    // return multiple data points from a single reading (e.g.
    // temperature and humidity).
    repeated Output output = 8;
}

// Location is the location specification for a device.
message Location {

    // The rack which the device belongs to.
    string rack = 1;

    // The board which the device belongs to.
    string board = 2;
}

// Output is the specification for one of a device's reading outputs.
message Output {

    // The name of the output. This is namespaced.
    string name = 1;

    // The type of the output. This is the last element of the namespace.
    string type = 2;

    // The data type of the output (e.g. int, string, bool, etc).
    string dataType = 3;

    // The decimal precision of the output. This is ignored if the output
    // dataType is not a float.
    int32 precision = 4;

    // The scaling factor to multiply the reading result by. This can be
    // positive or negative, whole or decimal.
    double scalingFactor = 5;

    // The unit of measure for the reading.
    Unit unit = 6;
}

// Unit is the unit specification for a reading output.
message Unit {

    // The full name of the unit, e.g. "degrees celsius".
    string name = 1;

    // The symbol for the unit, e.g. "C".
    string symbol = 2;
}
