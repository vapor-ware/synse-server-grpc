// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synse.proto

package synse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// HealthStatus is the status of a health check.
type HealthStatus int32

const (
	HealthStatus_UNKNOWN HealthStatus = 0
	HealthStatus_OK      HealthStatus = 1
	HealthStatus_FAILING HealthStatus = 2
)

var HealthStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "FAILING",
}
var HealthStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"OK":      1,
	"FAILING": 2,
}

func (x HealthStatus) String() string {
	return proto.EnumName(HealthStatus_name, int32(x))
}
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{0}
}

// WriteStatus are the statuses of a write as it is processed asynchronously.
type WriteStatus int32

const (
	WriteStatus_PENDING WriteStatus = 0
	WriteStatus_WRITING WriteStatus = 1
	WriteStatus_DONE    WriteStatus = 3
	WriteStatus_ERROR   WriteStatus = 4
)

var WriteStatus_name = map[int32]string{
	0: "PENDING",
	1: "WRITING",
	3: "DONE",
	4: "ERROR",
}
var WriteStatus_value = map[string]int32{
	"PENDING": 0,
	"WRITING": 1,
	"DONE":    3,
	"ERROR":   4,
}

func (x WriteStatus) String() string {
	return proto.EnumName(WriteStatus_name, int32(x))
}
func (WriteStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{1}
}

// Empty is an empty message (no fields) which is used for RPC routes which
// do not require any input for the request.
type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

// V3Bounds specifies time bounds in RFC3339 format.
type V3Bounds struct {
	// RFC3339 formatted timestamp specifying the beginning of the time bound. If
	// left unspecified, the start is considered unbound.
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	// RFC3339 formatted timestamp specifying the ending of the time bound. If
	// left unspecified, the end is considered unbound.
	End                  string   `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3Bounds) Reset()         { *m = V3Bounds{} }
func (m *V3Bounds) String() string { return proto.CompactTextString(m) }
func (*V3Bounds) ProtoMessage()    {}
func (*V3Bounds) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{1}
}
func (m *V3Bounds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Bounds.Unmarshal(m, b)
}
func (m *V3Bounds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Bounds.Marshal(b, m, deterministic)
}
func (dst *V3Bounds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Bounds.Merge(dst, src)
}
func (m *V3Bounds) XXX_Size() int {
	return xxx_messageInfo_V3Bounds.Size(m)
}
func (m *V3Bounds) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Bounds.DiscardUnknown(m)
}

var xxx_messageInfo_V3Bounds proto.InternalMessageInfo

func (m *V3Bounds) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *V3Bounds) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

// V3Device contains all of the pertinent known data associated with a device.
type V3Device struct {
	// RFC3339 timestamp for when the device info was gathered.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The globally unique ID for the device.
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// The type of device.
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// The name of the plugin that the device is managed by.
	Plugin string `protobuf:"bytes,4,opt,name=plugin" json:"plugin,omitempty"`
	// Additional information for the device.
	Info string `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
	// Any arbitrary metadata associated with the device.
	Metadata map[string]string `protobuf:"bytes,6,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The read/write capabilities of the device.
	Capabilities *V3DeviceCapability `protobuf:"bytes,7,opt,name=capabilities" json:"capabilities,omitempty"`
	// The tags that are associated with the device.
	Tags []*V3Tag `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	// The reading outputs that the device can generate on read.
	Outputs []*V3DeviceOutput `protobuf:"bytes,9,rep,name=outputs" json:"outputs,omitempty"`
	// A 1-based sort ordinal for the device. This will help determine where
	// the device shows up in the scan.
	SortIndex            int32    `protobuf:"varint,10,opt,name=sortIndex" json:"sortIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3Device) Reset()         { *m = V3Device{} }
func (m *V3Device) String() string { return proto.CompactTextString(m) }
func (*V3Device) ProtoMessage()    {}
func (*V3Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{2}
}
func (m *V3Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Device.Unmarshal(m, b)
}
func (m *V3Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Device.Marshal(b, m, deterministic)
}
func (dst *V3Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Device.Merge(dst, src)
}
func (m *V3Device) XXX_Size() int {
	return xxx_messageInfo_V3Device.Size(m)
}
func (m *V3Device) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Device.DiscardUnknown(m)
}

var xxx_messageInfo_V3Device proto.InternalMessageInfo

func (m *V3Device) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *V3Device) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *V3Device) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *V3Device) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *V3Device) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *V3Device) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *V3Device) GetCapabilities() *V3DeviceCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *V3Device) GetTags() []*V3Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *V3Device) GetOutputs() []*V3DeviceOutput {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *V3Device) GetSortIndex() int32 {
	if m != nil {
		return m.SortIndex
	}
	return 0
}

// V3DeviceCapability specifies the capabilities that a device exposes via Synse.
type V3DeviceCapability struct {
	// The capability mode of the device ("r": read only, "w": write only, "rw": read/write)
	Mode string `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	// The write capabilities of the device.
	Write                *V3WriteCapability `protobuf:"bytes,2,opt,name=write" json:"write,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *V3DeviceCapability) Reset()         { *m = V3DeviceCapability{} }
func (m *V3DeviceCapability) String() string { return proto.CompactTextString(m) }
func (*V3DeviceCapability) ProtoMessage()    {}
func (*V3DeviceCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{3}
}
func (m *V3DeviceCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3DeviceCapability.Unmarshal(m, b)
}
func (m *V3DeviceCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3DeviceCapability.Marshal(b, m, deterministic)
}
func (dst *V3DeviceCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3DeviceCapability.Merge(dst, src)
}
func (m *V3DeviceCapability) XXX_Size() int {
	return xxx_messageInfo_V3DeviceCapability.Size(m)
}
func (m *V3DeviceCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_V3DeviceCapability.DiscardUnknown(m)
}

var xxx_messageInfo_V3DeviceCapability proto.InternalMessageInfo

func (m *V3DeviceCapability) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *V3DeviceCapability) GetWrite() *V3WriteCapability {
	if m != nil {
		return m.Write
	}
	return nil
}

// V3DeviceOutput specifies the output types for a device's reading(s).
type V3DeviceOutput struct {
	// The name of the device output.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The type of the output.
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// The decimal precision of the output. A precision of 0 (default) means no
	// precision is applied.
	Precision int32 `protobuf:"varint,3,opt,name=precision" json:"precision,omitempty"`
	// The factor to multiply the reading result returned from the device. This can be
	// positive, negative, whole, or decimal.
	ScalingFactor float64 `protobuf:"fixed64,4,opt,name=scalingFactor" json:"scalingFactor,omitempty"`
	// The unit of measure for the reading output.
	Unit                 *V3OutputUnit `protobuf:"bytes,5,opt,name=unit" json:"unit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *V3DeviceOutput) Reset()         { *m = V3DeviceOutput{} }
func (m *V3DeviceOutput) String() string { return proto.CompactTextString(m) }
func (*V3DeviceOutput) ProtoMessage()    {}
func (*V3DeviceOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{4}
}
func (m *V3DeviceOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3DeviceOutput.Unmarshal(m, b)
}
func (m *V3DeviceOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3DeviceOutput.Marshal(b, m, deterministic)
}
func (dst *V3DeviceOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3DeviceOutput.Merge(dst, src)
}
func (m *V3DeviceOutput) XXX_Size() int {
	return xxx_messageInfo_V3DeviceOutput.Size(m)
}
func (m *V3DeviceOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_V3DeviceOutput.DiscardUnknown(m)
}

var xxx_messageInfo_V3DeviceOutput proto.InternalMessageInfo

func (m *V3DeviceOutput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *V3DeviceOutput) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *V3DeviceOutput) GetPrecision() int32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *V3DeviceOutput) GetScalingFactor() float64 {
	if m != nil {
		return m.ScalingFactor
	}
	return 0
}

func (m *V3DeviceOutput) GetUnit() *V3OutputUnit {
	if m != nil {
		return m.Unit
	}
	return nil
}

// V3DeviceSelector specifies a selector to identify devices for various actions.
type V3DeviceSelector struct {
	// The tags to use as selectors.
	Tags []*V3Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty"`
	// The ID of the device. If this is set, tags will be ignored.
	Id                   string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3DeviceSelector) Reset()         { *m = V3DeviceSelector{} }
func (m *V3DeviceSelector) String() string { return proto.CompactTextString(m) }
func (*V3DeviceSelector) ProtoMessage()    {}
func (*V3DeviceSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{5}
}
func (m *V3DeviceSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3DeviceSelector.Unmarshal(m, b)
}
func (m *V3DeviceSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3DeviceSelector.Marshal(b, m, deterministic)
}
func (dst *V3DeviceSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3DeviceSelector.Merge(dst, src)
}
func (m *V3DeviceSelector) XXX_Size() int {
	return xxx_messageInfo_V3DeviceSelector.Size(m)
}
func (m *V3DeviceSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_V3DeviceSelector.DiscardUnknown(m)
}

var xxx_messageInfo_V3DeviceSelector proto.InternalMessageInfo

func (m *V3DeviceSelector) GetTags() []*V3Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *V3DeviceSelector) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// V3Health is the health status for a plugin.
type V3Health struct {
	// RFC3339 formatted timestamp of the time when the health was checked.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The overall health status of a plugin.
	Status HealthStatus `protobuf:"varint,2,opt,name=status,enum=synse.HealthStatus" json:"status,omitempty"`
	// All of the health checks for a plugin.
	Checks               []*V3HealthCheck `protobuf:"bytes,3,rep,name=checks" json:"checks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *V3Health) Reset()         { *m = V3Health{} }
func (m *V3Health) String() string { return proto.CompactTextString(m) }
func (*V3Health) ProtoMessage()    {}
func (*V3Health) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{6}
}
func (m *V3Health) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Health.Unmarshal(m, b)
}
func (m *V3Health) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Health.Marshal(b, m, deterministic)
}
func (dst *V3Health) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Health.Merge(dst, src)
}
func (m *V3Health) XXX_Size() int {
	return xxx_messageInfo_V3Health.Size(m)
}
func (m *V3Health) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Health.DiscardUnknown(m)
}

var xxx_messageInfo_V3Health proto.InternalMessageInfo

func (m *V3Health) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *V3Health) GetStatus() HealthStatus {
	if m != nil {
		return m.Status
	}
	return HealthStatus_UNKNOWN
}

func (m *V3Health) GetChecks() []*V3HealthCheck {
	if m != nil {
		return m.Checks
	}
	return nil
}

// V3HealthCheck is the health check status for a plugin.
type V3HealthCheck struct {
	// The name of the health check.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The status of the health check.
	Status HealthStatus `protobuf:"varint,2,opt,name=status,enum=synse.HealthStatus" json:"status,omitempty"`
	// Any additional information associated with the health check.
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// RFC3339 formatted timestamp at which the check was last completed.
	Timestamp string `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	// The type of health check. The different kinds of health check are
	// defined in the SDK.
	Type                 string   `protobuf:"bytes,5,opt,name=type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3HealthCheck) Reset()         { *m = V3HealthCheck{} }
func (m *V3HealthCheck) String() string { return proto.CompactTextString(m) }
func (*V3HealthCheck) ProtoMessage()    {}
func (*V3HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{7}
}
func (m *V3HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3HealthCheck.Unmarshal(m, b)
}
func (m *V3HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3HealthCheck.Marshal(b, m, deterministic)
}
func (dst *V3HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3HealthCheck.Merge(dst, src)
}
func (m *V3HealthCheck) XXX_Size() int {
	return xxx_messageInfo_V3HealthCheck.Size(m)
}
func (m *V3HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_V3HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_V3HealthCheck proto.InternalMessageInfo

func (m *V3HealthCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *V3HealthCheck) GetStatus() HealthStatus {
	if m != nil {
		return m.Status
	}
	return HealthStatus_UNKNOWN
}

func (m *V3HealthCheck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *V3HealthCheck) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *V3HealthCheck) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// V3Metadata is static metadata about a plugin.
type V3Metadata struct {
	// The name of the plugin.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The maintainer of the plugin.
	Maintainer string `protobuf:"bytes,2,opt,name=maintainer" json:"maintainer,omitempty"`
	// The normalized tag name for plugin meta-info.
	Tag string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	// A brief description of the plugin.
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// A link to the plugin's VCS repo.
	Vcs                  string   `protobuf:"bytes,5,opt,name=vcs" json:"vcs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3Metadata) Reset()         { *m = V3Metadata{} }
func (m *V3Metadata) String() string { return proto.CompactTextString(m) }
func (*V3Metadata) ProtoMessage()    {}
func (*V3Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{8}
}
func (m *V3Metadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Metadata.Unmarshal(m, b)
}
func (m *V3Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Metadata.Marshal(b, m, deterministic)
}
func (dst *V3Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Metadata.Merge(dst, src)
}
func (m *V3Metadata) XXX_Size() int {
	return xxx_messageInfo_V3Metadata.Size(m)
}
func (m *V3Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_V3Metadata proto.InternalMessageInfo

func (m *V3Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *V3Metadata) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func (m *V3Metadata) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *V3Metadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *V3Metadata) GetVcs() string {
	if m != nil {
		return m.Vcs
	}
	return ""
}

// V3OutputUnit the unit of measure for a reading.
type V3OutputUnit struct {
	// The full name of the unit.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The symbolic representation of the unit.
	Symbol               string   `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3OutputUnit) Reset()         { *m = V3OutputUnit{} }
func (m *V3OutputUnit) String() string { return proto.CompactTextString(m) }
func (*V3OutputUnit) ProtoMessage()    {}
func (*V3OutputUnit) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{9}
}
func (m *V3OutputUnit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3OutputUnit.Unmarshal(m, b)
}
func (m *V3OutputUnit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3OutputUnit.Marshal(b, m, deterministic)
}
func (dst *V3OutputUnit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3OutputUnit.Merge(dst, src)
}
func (m *V3OutputUnit) XXX_Size() int {
	return xxx_messageInfo_V3OutputUnit.Size(m)
}
func (m *V3OutputUnit) XXX_DiscardUnknown() {
	xxx_messageInfo_V3OutputUnit.DiscardUnknown(m)
}

var xxx_messageInfo_V3OutputUnit proto.InternalMessageInfo

func (m *V3OutputUnit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *V3OutputUnit) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

// V3Reading is a reading response from a device.
type V3Reading struct {
	// The GUID of the device being read from.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// RFC3339 formatted timestamp for when the reading was taken.
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The type of the reading.
	Type string `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// The type of the device the reading originated from.
	DeviceType string `protobuf:"bytes,4,opt,name=deviceType" json:"deviceType,omitempty"`
	// Any additional information associated with a reading.
	Context map[string]string `protobuf:"bytes,5,rep,name=context" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The unit of measure for the reading.
	Unit *V3OutputUnit `protobuf:"bytes,6,opt,name=unit" json:"unit,omitempty"`
	// The value of the reading.
	//
	// Types that are valid to be assigned to Value:
	//	*V3Reading_StringValue
	//	*V3Reading_BoolValue
	//	*V3Reading_Float32Value
	//	*V3Reading_Float64Value
	//	*V3Reading_Int32Value
	//	*V3Reading_Int64Value
	//	*V3Reading_BytesValue
	//	*V3Reading_Uint32Value
	//	*V3Reading_Uint64Value
	Value                isV3Reading_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *V3Reading) Reset()         { *m = V3Reading{} }
func (m *V3Reading) String() string { return proto.CompactTextString(m) }
func (*V3Reading) ProtoMessage()    {}
func (*V3Reading) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{10}
}
func (m *V3Reading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Reading.Unmarshal(m, b)
}
func (m *V3Reading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Reading.Marshal(b, m, deterministic)
}
func (dst *V3Reading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Reading.Merge(dst, src)
}
func (m *V3Reading) XXX_Size() int {
	return xxx_messageInfo_V3Reading.Size(m)
}
func (m *V3Reading) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Reading.DiscardUnknown(m)
}

var xxx_messageInfo_V3Reading proto.InternalMessageInfo

type isV3Reading_Value interface {
	isV3Reading_Value()
}

type V3Reading_StringValue struct {
	StringValue string `protobuf:"bytes,7,opt,name=string_value,json=stringValue,oneof"`
}
type V3Reading_BoolValue struct {
	BoolValue bool `protobuf:"varint,8,opt,name=bool_value,json=boolValue,oneof"`
}
type V3Reading_Float32Value struct {
	Float32Value float32 `protobuf:"fixed32,9,opt,name=float32_value,json=float32Value,oneof"`
}
type V3Reading_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,10,opt,name=float64_value,json=float64Value,oneof"`
}
type V3Reading_Int32Value struct {
	Int32Value int32 `protobuf:"varint,11,opt,name=int32_value,json=int32Value,oneof"`
}
type V3Reading_Int64Value struct {
	Int64Value int64 `protobuf:"varint,12,opt,name=int64_value,json=int64Value,oneof"`
}
type V3Reading_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,13,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type V3Reading_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,14,opt,name=uint32_value,json=uint32Value,oneof"`
}
type V3Reading_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,15,opt,name=uint64_value,json=uint64Value,oneof"`
}

func (*V3Reading_StringValue) isV3Reading_Value()  {}
func (*V3Reading_BoolValue) isV3Reading_Value()    {}
func (*V3Reading_Float32Value) isV3Reading_Value() {}
func (*V3Reading_Float64Value) isV3Reading_Value() {}
func (*V3Reading_Int32Value) isV3Reading_Value()   {}
func (*V3Reading_Int64Value) isV3Reading_Value()   {}
func (*V3Reading_BytesValue) isV3Reading_Value()   {}
func (*V3Reading_Uint32Value) isV3Reading_Value()  {}
func (*V3Reading_Uint64Value) isV3Reading_Value()  {}

func (m *V3Reading) GetValue() isV3Reading_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *V3Reading) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *V3Reading) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *V3Reading) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *V3Reading) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *V3Reading) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *V3Reading) GetUnit() *V3OutputUnit {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *V3Reading) GetStringValue() string {
	if x, ok := m.GetValue().(*V3Reading_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *V3Reading) GetBoolValue() bool {
	if x, ok := m.GetValue().(*V3Reading_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *V3Reading) GetFloat32Value() float32 {
	if x, ok := m.GetValue().(*V3Reading_Float32Value); ok {
		return x.Float32Value
	}
	return 0
}

func (m *V3Reading) GetFloat64Value() float64 {
	if x, ok := m.GetValue().(*V3Reading_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (m *V3Reading) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*V3Reading_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *V3Reading) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*V3Reading_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *V3Reading) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*V3Reading_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *V3Reading) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*V3Reading_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *V3Reading) GetUint64Value() uint64 {
	if x, ok := m.GetValue().(*V3Reading_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*V3Reading) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _V3Reading_OneofMarshaler, _V3Reading_OneofUnmarshaler, _V3Reading_OneofSizer, []interface{}{
		(*V3Reading_StringValue)(nil),
		(*V3Reading_BoolValue)(nil),
		(*V3Reading_Float32Value)(nil),
		(*V3Reading_Float64Value)(nil),
		(*V3Reading_Int32Value)(nil),
		(*V3Reading_Int64Value)(nil),
		(*V3Reading_BytesValue)(nil),
		(*V3Reading_Uint32Value)(nil),
		(*V3Reading_Uint64Value)(nil),
	}
}

func _V3Reading_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*V3Reading)
	// value
	switch x := m.Value.(type) {
	case *V3Reading_StringValue:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *V3Reading_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *V3Reading_Float32Value:
		b.EncodeVarint(9<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.Float32Value)))
	case *V3Reading_Float64Value:
		b.EncodeVarint(10<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Float64Value))
	case *V3Reading_Int32Value:
		b.EncodeVarint(11<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *V3Reading_Int64Value:
		b.EncodeVarint(12<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *V3Reading_BytesValue:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case *V3Reading_Uint32Value:
		b.EncodeVarint(14<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32Value))
	case *V3Reading_Uint64Value:
		b.EncodeVarint(15<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint64Value))
	case nil:
	default:
		return fmt.Errorf("V3Reading.Value has unexpected type %T", x)
	}
	return nil
}

func _V3Reading_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*V3Reading)
	switch tag {
	case 7: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &V3Reading_StringValue{x}
		return true, err
	case 8: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &V3Reading_BoolValue{x != 0}
		return true, err
	case 9: // value.float32_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &V3Reading_Float32Value{math.Float32frombits(uint32(x))}
		return true, err
	case 10: // value.float64_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &V3Reading_Float64Value{math.Float64frombits(x)}
		return true, err
	case 11: // value.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &V3Reading_Int32Value{int32(x)}
		return true, err
	case 12: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &V3Reading_Int64Value{int64(x)}
		return true, err
	case 13: // value.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &V3Reading_BytesValue{x}
		return true, err
	case 14: // value.uint32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &V3Reading_Uint32Value{uint32(x)}
		return true, err
	case 15: // value.uint64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &V3Reading_Uint64Value{x}
		return true, err
	default:
		return false, nil
	}
}

func _V3Reading_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*V3Reading)
	// value
	switch x := m.Value.(type) {
	case *V3Reading_StringValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *V3Reading_BoolValue:
		n += 1 // tag and wire
		n += 1
	case *V3Reading_Float32Value:
		n += 1 // tag and wire
		n += 4
	case *V3Reading_Float64Value:
		n += 1 // tag and wire
		n += 8
	case *V3Reading_Int32Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *V3Reading_Int64Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *V3Reading_BytesValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *V3Reading_Uint32Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint32Value))
	case *V3Reading_Uint64Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Uint64Value))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// V3ReadRequest is a request for device readings.
type V3ReadRequest struct {
	// The selector for the device(s) to read from.
	Selector             *V3DeviceSelector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *V3ReadRequest) Reset()         { *m = V3ReadRequest{} }
func (m *V3ReadRequest) String() string { return proto.CompactTextString(m) }
func (*V3ReadRequest) ProtoMessage()    {}
func (*V3ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{11}
}
func (m *V3ReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3ReadRequest.Unmarshal(m, b)
}
func (m *V3ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3ReadRequest.Marshal(b, m, deterministic)
}
func (dst *V3ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3ReadRequest.Merge(dst, src)
}
func (m *V3ReadRequest) XXX_Size() int {
	return xxx_messageInfo_V3ReadRequest.Size(m)
}
func (m *V3ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_V3ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_V3ReadRequest proto.InternalMessageInfo

func (m *V3ReadRequest) GetSelector() *V3DeviceSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// V3Tag is a specification for a single tag.
type V3Tag struct {
	// The namespace of the tag.
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// The annotation of the tag.
	Annotation string `protobuf:"bytes,2,opt,name=annotation" json:"annotation,omitempty"`
	// The tag label.
	Label                string   `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3Tag) Reset()         { *m = V3Tag{} }
func (m *V3Tag) String() string { return proto.CompactTextString(m) }
func (*V3Tag) ProtoMessage()    {}
func (*V3Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{12}
}
func (m *V3Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Tag.Unmarshal(m, b)
}
func (m *V3Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Tag.Marshal(b, m, deterministic)
}
func (dst *V3Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Tag.Merge(dst, src)
}
func (m *V3Tag) XXX_Size() int {
	return xxx_messageInfo_V3Tag.Size(m)
}
func (m *V3Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Tag.DiscardUnknown(m)
}

var xxx_messageInfo_V3Tag proto.InternalMessageInfo

func (m *V3Tag) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *V3Tag) GetAnnotation() string {
	if m != nil {
		return m.Annotation
	}
	return ""
}

func (m *V3Tag) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

// V3TestStatus is the status response for plugin availability.
type V3TestStatus struct {
	// A flag describing whether the plugin is ready and reachable.
	Ok                   bool     `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3TestStatus) Reset()         { *m = V3TestStatus{} }
func (m *V3TestStatus) String() string { return proto.CompactTextString(m) }
func (*V3TestStatus) ProtoMessage()    {}
func (*V3TestStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{13}
}
func (m *V3TestStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3TestStatus.Unmarshal(m, b)
}
func (m *V3TestStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3TestStatus.Marshal(b, m, deterministic)
}
func (dst *V3TestStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3TestStatus.Merge(dst, src)
}
func (m *V3TestStatus) XXX_Size() int {
	return xxx_messageInfo_V3TestStatus.Size(m)
}
func (m *V3TestStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_V3TestStatus.DiscardUnknown(m)
}

var xxx_messageInfo_V3TestStatus proto.InternalMessageInfo

func (m *V3TestStatus) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// V3TransactionSelector specifies a selector to identify a transaction.
type V3TransactionSelector struct {
	// The ID of a write transaction.
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3TransactionSelector) Reset()         { *m = V3TransactionSelector{} }
func (m *V3TransactionSelector) String() string { return proto.CompactTextString(m) }
func (*V3TransactionSelector) ProtoMessage()    {}
func (*V3TransactionSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{14}
}
func (m *V3TransactionSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3TransactionSelector.Unmarshal(m, b)
}
func (m *V3TransactionSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3TransactionSelector.Marshal(b, m, deterministic)
}
func (dst *V3TransactionSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3TransactionSelector.Merge(dst, src)
}
func (m *V3TransactionSelector) XXX_Size() int {
	return xxx_messageInfo_V3TransactionSelector.Size(m)
}
func (m *V3TransactionSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_V3TransactionSelector.DiscardUnknown(m)
}

var xxx_messageInfo_V3TransactionSelector proto.InternalMessageInfo

func (m *V3TransactionSelector) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// V3TransactionStatus the status of a write transaction.
type V3TransactionStatus struct {
	// The ID of the write transaction.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// RFC3339 formatted timestamp of when the transaction was created.
	Created string `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// RFC3339 formatted timestamp of when the transaction was last updated.
	Updated string `protobuf:"bytes,3,opt,name=updated" json:"updated,omitempty"`
	// Context information for any errors that may have occurred.
	Message string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	// The timeout within which the transaction remains valid.
	Timeout string `protobuf:"bytes,5,opt,name=timeout" json:"timeout,omitempty"`
	// The status of the write (pending, writing, done, error).
	Status WriteStatus `protobuf:"varint,6,opt,name=status,enum=synse.WriteStatus" json:"status,omitempty"`
	// The data that was written for the write transaction.
	Context              *V3WriteData `protobuf:"bytes,7,opt,name=context" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *V3TransactionStatus) Reset()         { *m = V3TransactionStatus{} }
func (m *V3TransactionStatus) String() string { return proto.CompactTextString(m) }
func (*V3TransactionStatus) ProtoMessage()    {}
func (*V3TransactionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{15}
}
func (m *V3TransactionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3TransactionStatus.Unmarshal(m, b)
}
func (m *V3TransactionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3TransactionStatus.Marshal(b, m, deterministic)
}
func (dst *V3TransactionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3TransactionStatus.Merge(dst, src)
}
func (m *V3TransactionStatus) XXX_Size() int {
	return xxx_messageInfo_V3TransactionStatus.Size(m)
}
func (m *V3TransactionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_V3TransactionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_V3TransactionStatus proto.InternalMessageInfo

func (m *V3TransactionStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *V3TransactionStatus) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *V3TransactionStatus) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *V3TransactionStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *V3TransactionStatus) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *V3TransactionStatus) GetStatus() WriteStatus {
	if m != nil {
		return m.Status
	}
	return WriteStatus_PENDING
}

func (m *V3TransactionStatus) GetContext() *V3WriteData {
	if m != nil {
		return m.Context
	}
	return nil
}

// V3Version provides version information for the plugin.
type V3Version struct {
	// The semantic version of the plugin.
	PluginVersion string `protobuf:"bytes,1,opt,name=pluginVersion" json:"pluginVersion,omitempty"`
	// The version of the SDK the plugin uses.
	SdkVersion string `protobuf:"bytes,2,opt,name=sdkVersion" json:"sdkVersion,omitempty"`
	// The timestamp from when the plugin was built.
	BuildDate string `protobuf:"bytes,3,opt,name=buildDate" json:"buildDate,omitempty"`
	// The commit hash at which the plugin was built.
	GitCommit string `protobuf:"bytes,4,opt,name=gitCommit" json:"gitCommit,omitempty"`
	// The tag name at which the plugin was built.
	GitTag string `protobuf:"bytes,5,opt,name=gitTag" json:"gitTag,omitempty"`
	// The architecture that the plugin was built.
	Arch string `protobuf:"bytes,6,opt,name=arch" json:"arch,omitempty"`
	// The operating system that the plugin was built for.
	Os                   string   `protobuf:"bytes,7,opt,name=os" json:"os,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3Version) Reset()         { *m = V3Version{} }
func (m *V3Version) String() string { return proto.CompactTextString(m) }
func (*V3Version) ProtoMessage()    {}
func (*V3Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{16}
}
func (m *V3Version) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3Version.Unmarshal(m, b)
}
func (m *V3Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3Version.Marshal(b, m, deterministic)
}
func (dst *V3Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3Version.Merge(dst, src)
}
func (m *V3Version) XXX_Size() int {
	return xxx_messageInfo_V3Version.Size(m)
}
func (m *V3Version) XXX_DiscardUnknown() {
	xxx_messageInfo_V3Version.DiscardUnknown(m)
}

var xxx_messageInfo_V3Version proto.InternalMessageInfo

func (m *V3Version) GetPluginVersion() string {
	if m != nil {
		return m.PluginVersion
	}
	return ""
}

func (m *V3Version) GetSdkVersion() string {
	if m != nil {
		return m.SdkVersion
	}
	return ""
}

func (m *V3Version) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *V3Version) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *V3Version) GetGitTag() string {
	if m != nil {
		return m.GitTag
	}
	return ""
}

func (m *V3Version) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *V3Version) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

// V3WriteCapability specifies the write capabilities for a device.
type V3WriteCapability struct {
	// The write actions supported by a device.
	Actions              []string `protobuf:"bytes,1,rep,name=actions" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3WriteCapability) Reset()         { *m = V3WriteCapability{} }
func (m *V3WriteCapability) String() string { return proto.CompactTextString(m) }
func (*V3WriteCapability) ProtoMessage()    {}
func (*V3WriteCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{17}
}
func (m *V3WriteCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3WriteCapability.Unmarshal(m, b)
}
func (m *V3WriteCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3WriteCapability.Marshal(b, m, deterministic)
}
func (dst *V3WriteCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3WriteCapability.Merge(dst, src)
}
func (m *V3WriteCapability) XXX_Size() int {
	return xxx_messageInfo_V3WriteCapability.Size(m)
}
func (m *V3WriteCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_V3WriteCapability.DiscardUnknown(m)
}

var xxx_messageInfo_V3WriteCapability proto.InternalMessageInfo

func (m *V3WriteCapability) GetActions() []string {
	if m != nil {
		return m.Actions
	}
	return nil
}

// V3WriteData is the data to write to a device.
type V3WriteData struct {
	// The action string for the write.
	Action string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	// Additional data for the write action.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// A custom transaction that can be associated with the write.
	Transaction          string   `protobuf:"bytes,3,opt,name=transaction" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3WriteData) Reset()         { *m = V3WriteData{} }
func (m *V3WriteData) String() string { return proto.CompactTextString(m) }
func (*V3WriteData) ProtoMessage()    {}
func (*V3WriteData) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{18}
}
func (m *V3WriteData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3WriteData.Unmarshal(m, b)
}
func (m *V3WriteData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3WriteData.Marshal(b, m, deterministic)
}
func (dst *V3WriteData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3WriteData.Merge(dst, src)
}
func (m *V3WriteData) XXX_Size() int {
	return xxx_messageInfo_V3WriteData.Size(m)
}
func (m *V3WriteData) XXX_DiscardUnknown() {
	xxx_messageInfo_V3WriteData.DiscardUnknown(m)
}

var xxx_messageInfo_V3WriteData proto.InternalMessageInfo

func (m *V3WriteData) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *V3WriteData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *V3WriteData) GetTransaction() string {
	if m != nil {
		return m.Transaction
	}
	return ""
}

// V3WritePayload the payload for a write which specifies the device to
// write to and the data to write.
type V3WritePayload struct {
	// The selector for the device to write to. This should resolve
	// to a single device.
	Selector *V3DeviceSelector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	// The data to write to the device.
	Data                 []*V3WriteData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *V3WritePayload) Reset()         { *m = V3WritePayload{} }
func (m *V3WritePayload) String() string { return proto.CompactTextString(m) }
func (*V3WritePayload) ProtoMessage()    {}
func (*V3WritePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{19}
}
func (m *V3WritePayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3WritePayload.Unmarshal(m, b)
}
func (m *V3WritePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3WritePayload.Marshal(b, m, deterministic)
}
func (dst *V3WritePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3WritePayload.Merge(dst, src)
}
func (m *V3WritePayload) XXX_Size() int {
	return xxx_messageInfo_V3WritePayload.Size(m)
}
func (m *V3WritePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_V3WritePayload.DiscardUnknown(m)
}

var xxx_messageInfo_V3WritePayload proto.InternalMessageInfo

func (m *V3WritePayload) GetSelector() *V3DeviceSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *V3WritePayload) GetData() []*V3WriteData {
	if m != nil {
		return m.Data
	}
	return nil
}

// V3WriteTransaction contains information associating a write action with
// a transaction for asynchronous tracking.
type V3WriteTransaction struct {
	// The ID of the write transaction.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The GUID of the device written to.
	Device string `protobuf:"bytes,2,opt,name=device" json:"device,omitempty"`
	// The data that was written for the write transaction.
	Context *V3WriteData `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	// The timeout within which the transaction remains valid.
	Timeout              string   `protobuf:"bytes,4,opt,name=timeout" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *V3WriteTransaction) Reset()         { *m = V3WriteTransaction{} }
func (m *V3WriteTransaction) String() string { return proto.CompactTextString(m) }
func (*V3WriteTransaction) ProtoMessage()    {}
func (*V3WriteTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_synse_6356a1a104166c3c, []int{20}
}
func (m *V3WriteTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_V3WriteTransaction.Unmarshal(m, b)
}
func (m *V3WriteTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_V3WriteTransaction.Marshal(b, m, deterministic)
}
func (dst *V3WriteTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V3WriteTransaction.Merge(dst, src)
}
func (m *V3WriteTransaction) XXX_Size() int {
	return xxx_messageInfo_V3WriteTransaction.Size(m)
}
func (m *V3WriteTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_V3WriteTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_V3WriteTransaction proto.InternalMessageInfo

func (m *V3WriteTransaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *V3WriteTransaction) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *V3WriteTransaction) GetContext() *V3WriteData {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *V3WriteTransaction) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "synse.Empty")
	proto.RegisterType((*V3Bounds)(nil), "synse.V3Bounds")
	proto.RegisterType((*V3Device)(nil), "synse.V3Device")
	proto.RegisterMapType((map[string]string)(nil), "synse.V3Device.MetadataEntry")
	proto.RegisterType((*V3DeviceCapability)(nil), "synse.V3DeviceCapability")
	proto.RegisterType((*V3DeviceOutput)(nil), "synse.V3DeviceOutput")
	proto.RegisterType((*V3DeviceSelector)(nil), "synse.V3DeviceSelector")
	proto.RegisterType((*V3Health)(nil), "synse.V3Health")
	proto.RegisterType((*V3HealthCheck)(nil), "synse.V3HealthCheck")
	proto.RegisterType((*V3Metadata)(nil), "synse.V3Metadata")
	proto.RegisterType((*V3OutputUnit)(nil), "synse.V3OutputUnit")
	proto.RegisterType((*V3Reading)(nil), "synse.V3Reading")
	proto.RegisterMapType((map[string]string)(nil), "synse.V3Reading.ContextEntry")
	proto.RegisterType((*V3ReadRequest)(nil), "synse.V3ReadRequest")
	proto.RegisterType((*V3Tag)(nil), "synse.V3Tag")
	proto.RegisterType((*V3TestStatus)(nil), "synse.V3TestStatus")
	proto.RegisterType((*V3TransactionSelector)(nil), "synse.V3TransactionSelector")
	proto.RegisterType((*V3TransactionStatus)(nil), "synse.V3TransactionStatus")
	proto.RegisterType((*V3Version)(nil), "synse.V3Version")
	proto.RegisterType((*V3WriteCapability)(nil), "synse.V3WriteCapability")
	proto.RegisterType((*V3WriteData)(nil), "synse.V3WriteData")
	proto.RegisterType((*V3WritePayload)(nil), "synse.V3WritePayload")
	proto.RegisterType((*V3WriteTransaction)(nil), "synse.V3WriteTransaction")
	proto.RegisterEnum("synse.HealthStatus", HealthStatus_name, HealthStatus_value)
	proto.RegisterEnum("synse.WriteStatus", WriteStatus_name, WriteStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for V3Plugin service

type V3PluginClient interface {
	// Devices gets all devices that a plugin manages.
	Devices(ctx context.Context, in *V3DeviceSelector, opts ...grpc.CallOption) (V3Plugin_DevicesClient, error)
	// Health gets the health status of a plugin.
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3Health, error)
	// Metadata gets the plugin meta-information.
	Metadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3Metadata, error)
	// Read gets readings from the specified plugin device(s).
	Read(ctx context.Context, in *V3ReadRequest, opts ...grpc.CallOption) (V3Plugin_ReadClient, error)
	// ReadCache gets the cached readings from the plugin. If the plugin
	// is not configured to cache readings, it will returned the entire
	// current read state.
	ReadCache(ctx context.Context, in *V3Bounds, opts ...grpc.CallOption) (V3Plugin_ReadCacheClient, error)
	// Test checks whether the plugin is reachable and ready.
	Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3TestStatus, error)
	// Transaction gets the status of a write transaction for an
	// asynchronous write.
	Transaction(ctx context.Context, in *V3TransactionSelector, opts ...grpc.CallOption) (*V3TransactionStatus, error)
	// Transactions gets all transactions which are currently kept
	// in the plugin's transaction cache.
	Transactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (V3Plugin_TransactionsClient, error)
	// Version gets the version information for the plugin.
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3Version, error)
	// WriteAsync writes data to the specified plugin device. A transaction ID
	// is returned so the write status can be checked asynchronously.
	WriteAsync(ctx context.Context, in *V3WritePayload, opts ...grpc.CallOption) (V3Plugin_WriteAsyncClient, error)
	// WriteSync writes data to the specified plugin device. The request blocks
	// until the write resolves so no asynchronous checking is required.
	WriteSync(ctx context.Context, in *V3WritePayload, opts ...grpc.CallOption) (V3Plugin_WriteSyncClient, error)
}

type v3PluginClient struct {
	cc *grpc.ClientConn
}

func NewV3PluginClient(cc *grpc.ClientConn) V3PluginClient {
	return &v3PluginClient{cc}
}

func (c *v3PluginClient) Devices(ctx context.Context, in *V3DeviceSelector, opts ...grpc.CallOption) (V3Plugin_DevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V3Plugin_serviceDesc.Streams[0], c.cc, "/synse.V3Plugin/Devices", opts...)
	if err != nil {
		return nil, err
	}
	x := &v3PluginDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V3Plugin_DevicesClient interface {
	Recv() (*V3Device, error)
	grpc.ClientStream
}

type v3PluginDevicesClient struct {
	grpc.ClientStream
}

func (x *v3PluginDevicesClient) Recv() (*V3Device, error) {
	m := new(V3Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v3PluginClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3Health, error) {
	out := new(V3Health)
	err := grpc.Invoke(ctx, "/synse.V3Plugin/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v3PluginClient) Metadata(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3Metadata, error) {
	out := new(V3Metadata)
	err := grpc.Invoke(ctx, "/synse.V3Plugin/Metadata", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v3PluginClient) Read(ctx context.Context, in *V3ReadRequest, opts ...grpc.CallOption) (V3Plugin_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V3Plugin_serviceDesc.Streams[1], c.cc, "/synse.V3Plugin/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &v3PluginReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V3Plugin_ReadClient interface {
	Recv() (*V3Reading, error)
	grpc.ClientStream
}

type v3PluginReadClient struct {
	grpc.ClientStream
}

func (x *v3PluginReadClient) Recv() (*V3Reading, error) {
	m := new(V3Reading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v3PluginClient) ReadCache(ctx context.Context, in *V3Bounds, opts ...grpc.CallOption) (V3Plugin_ReadCacheClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V3Plugin_serviceDesc.Streams[2], c.cc, "/synse.V3Plugin/ReadCache", opts...)
	if err != nil {
		return nil, err
	}
	x := &v3PluginReadCacheClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V3Plugin_ReadCacheClient interface {
	Recv() (*V3Reading, error)
	grpc.ClientStream
}

type v3PluginReadCacheClient struct {
	grpc.ClientStream
}

func (x *v3PluginReadCacheClient) Recv() (*V3Reading, error) {
	m := new(V3Reading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v3PluginClient) Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3TestStatus, error) {
	out := new(V3TestStatus)
	err := grpc.Invoke(ctx, "/synse.V3Plugin/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v3PluginClient) Transaction(ctx context.Context, in *V3TransactionSelector, opts ...grpc.CallOption) (*V3TransactionStatus, error) {
	out := new(V3TransactionStatus)
	err := grpc.Invoke(ctx, "/synse.V3Plugin/Transaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v3PluginClient) Transactions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (V3Plugin_TransactionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V3Plugin_serviceDesc.Streams[3], c.cc, "/synse.V3Plugin/Transactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &v3PluginTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V3Plugin_TransactionsClient interface {
	Recv() (*V3TransactionStatus, error)
	grpc.ClientStream
}

type v3PluginTransactionsClient struct {
	grpc.ClientStream
}

func (x *v3PluginTransactionsClient) Recv() (*V3TransactionStatus, error) {
	m := new(V3TransactionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v3PluginClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*V3Version, error) {
	out := new(V3Version)
	err := grpc.Invoke(ctx, "/synse.V3Plugin/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v3PluginClient) WriteAsync(ctx context.Context, in *V3WritePayload, opts ...grpc.CallOption) (V3Plugin_WriteAsyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V3Plugin_serviceDesc.Streams[4], c.cc, "/synse.V3Plugin/WriteAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &v3PluginWriteAsyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V3Plugin_WriteAsyncClient interface {
	Recv() (*V3WriteTransaction, error)
	grpc.ClientStream
}

type v3PluginWriteAsyncClient struct {
	grpc.ClientStream
}

func (x *v3PluginWriteAsyncClient) Recv() (*V3WriteTransaction, error) {
	m := new(V3WriteTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v3PluginClient) WriteSync(ctx context.Context, in *V3WritePayload, opts ...grpc.CallOption) (V3Plugin_WriteSyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V3Plugin_serviceDesc.Streams[5], c.cc, "/synse.V3Plugin/WriteSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &v3PluginWriteSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V3Plugin_WriteSyncClient interface {
	Recv() (*V3TransactionStatus, error)
	grpc.ClientStream
}

type v3PluginWriteSyncClient struct {
	grpc.ClientStream
}

func (x *v3PluginWriteSyncClient) Recv() (*V3TransactionStatus, error) {
	m := new(V3TransactionStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for V3Plugin service

type V3PluginServer interface {
	// Devices gets all devices that a plugin manages.
	Devices(*V3DeviceSelector, V3Plugin_DevicesServer) error
	// Health gets the health status of a plugin.
	Health(context.Context, *Empty) (*V3Health, error)
	// Metadata gets the plugin meta-information.
	Metadata(context.Context, *Empty) (*V3Metadata, error)
	// Read gets readings from the specified plugin device(s).
	Read(*V3ReadRequest, V3Plugin_ReadServer) error
	// ReadCache gets the cached readings from the plugin. If the plugin
	// is not configured to cache readings, it will returned the entire
	// current read state.
	ReadCache(*V3Bounds, V3Plugin_ReadCacheServer) error
	// Test checks whether the plugin is reachable and ready.
	Test(context.Context, *Empty) (*V3TestStatus, error)
	// Transaction gets the status of a write transaction for an
	// asynchronous write.
	Transaction(context.Context, *V3TransactionSelector) (*V3TransactionStatus, error)
	// Transactions gets all transactions which are currently kept
	// in the plugin's transaction cache.
	Transactions(*Empty, V3Plugin_TransactionsServer) error
	// Version gets the version information for the plugin.
	Version(context.Context, *Empty) (*V3Version, error)
	// WriteAsync writes data to the specified plugin device. A transaction ID
	// is returned so the write status can be checked asynchronously.
	WriteAsync(*V3WritePayload, V3Plugin_WriteAsyncServer) error
	// WriteSync writes data to the specified plugin device. The request blocks
	// until the write resolves so no asynchronous checking is required.
	WriteSync(*V3WritePayload, V3Plugin_WriteSyncServer) error
}

func RegisterV3PluginServer(s *grpc.Server, srv V3PluginServer) {
	s.RegisterService(&_V3Plugin_serviceDesc, srv)
}

func _V3Plugin_Devices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(V3DeviceSelector)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3PluginServer).Devices(m, &v3PluginDevicesServer{stream})
}

type V3Plugin_DevicesServer interface {
	Send(*V3Device) error
	grpc.ServerStream
}

type v3PluginDevicesServer struct {
	grpc.ServerStream
}

func (x *v3PluginDevicesServer) Send(m *V3Device) error {
	return x.ServerStream.SendMsg(m)
}

func _V3Plugin_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V3PluginServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.V3Plugin/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V3PluginServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _V3Plugin_Metadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V3PluginServer).Metadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.V3Plugin/Metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V3PluginServer).Metadata(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _V3Plugin_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(V3ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3PluginServer).Read(m, &v3PluginReadServer{stream})
}

type V3Plugin_ReadServer interface {
	Send(*V3Reading) error
	grpc.ServerStream
}

type v3PluginReadServer struct {
	grpc.ServerStream
}

func (x *v3PluginReadServer) Send(m *V3Reading) error {
	return x.ServerStream.SendMsg(m)
}

func _V3Plugin_ReadCache_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(V3Bounds)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3PluginServer).ReadCache(m, &v3PluginReadCacheServer{stream})
}

type V3Plugin_ReadCacheServer interface {
	Send(*V3Reading) error
	grpc.ServerStream
}

type v3PluginReadCacheServer struct {
	grpc.ServerStream
}

func (x *v3PluginReadCacheServer) Send(m *V3Reading) error {
	return x.ServerStream.SendMsg(m)
}

func _V3Plugin_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V3PluginServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.V3Plugin/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V3PluginServer).Test(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _V3Plugin_Transaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V3TransactionSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V3PluginServer).Transaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.V3Plugin/Transaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V3PluginServer).Transaction(ctx, req.(*V3TransactionSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _V3Plugin_Transactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3PluginServer).Transactions(m, &v3PluginTransactionsServer{stream})
}

type V3Plugin_TransactionsServer interface {
	Send(*V3TransactionStatus) error
	grpc.ServerStream
}

type v3PluginTransactionsServer struct {
	grpc.ServerStream
}

func (x *v3PluginTransactionsServer) Send(m *V3TransactionStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _V3Plugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V3PluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.V3Plugin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V3PluginServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _V3Plugin_WriteAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(V3WritePayload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3PluginServer).WriteAsync(m, &v3PluginWriteAsyncServer{stream})
}

type V3Plugin_WriteAsyncServer interface {
	Send(*V3WriteTransaction) error
	grpc.ServerStream
}

type v3PluginWriteAsyncServer struct {
	grpc.ServerStream
}

func (x *v3PluginWriteAsyncServer) Send(m *V3WriteTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func _V3Plugin_WriteSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(V3WritePayload)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V3PluginServer).WriteSync(m, &v3PluginWriteSyncServer{stream})
}

type V3Plugin_WriteSyncServer interface {
	Send(*V3TransactionStatus) error
	grpc.ServerStream
}

type v3PluginWriteSyncServer struct {
	grpc.ServerStream
}

func (x *v3PluginWriteSyncServer) Send(m *V3TransactionStatus) error {
	return x.ServerStream.SendMsg(m)
}

var _V3Plugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "synse.V3Plugin",
	HandlerType: (*V3PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _V3Plugin_Health_Handler,
		},
		{
			MethodName: "Metadata",
			Handler:    _V3Plugin_Metadata_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _V3Plugin_Test_Handler,
		},
		{
			MethodName: "Transaction",
			Handler:    _V3Plugin_Transaction_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _V3Plugin_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Devices",
			Handler:       _V3Plugin_Devices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _V3Plugin_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadCache",
			Handler:       _V3Plugin_ReadCache_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Transactions",
			Handler:       _V3Plugin_Transactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteAsync",
			Handler:       _V3Plugin_WriteAsync_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteSync",
			Handler:       _V3Plugin_WriteSync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synse.proto",
}

func init() { proto.RegisterFile("synse.proto", fileDescriptor_synse_6356a1a104166c3c) }

var fileDescriptor_synse_6356a1a104166c3c = []byte{
	// 1455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x72, 0x13, 0xc7,
	0x12, 0xd6, 0x4a, 0xab, 0x9f, 0xed, 0x95, 0x8d, 0x18, 0x7e, 0xce, 0xe2, 0xe2, 0x70, 0x74, 0x96,
	0x73, 0x82, 0x02, 0xc1, 0xa1, 0x64, 0x0a, 0x12, 0x42, 0x2e, 0xb0, 0x65, 0x62, 0x17, 0x89, 0x4d,
	0x2d, 0xc6, 0xa4, 0x8a, 0x8b, 0xd4, 0x68, 0x35, 0xc8, 0x5b, 0x96, 0x76, 0x95, 0x9d, 0x11, 0x41,
	0xd7, 0x49, 0xe5, 0x29, 0x72, 0x91, 0x9b, 0x3c, 0x4c, 0x9e, 0x21, 0x0f, 0x90, 0xdb, 0x3c, 0x42,
	0xaa, 0xe7, 0x67, 0x7f, 0x64, 0x1b, 0x17, 0xb9, 0xdb, 0xee, 0xfe, 0x66, 0xa6, 0x67, 0xfa, 0xeb,
	0x6f, 0x66, 0xc1, 0xe5, 0x8b, 0x98, 0xb3, 0xf5, 0x59, 0x9a, 0x88, 0x84, 0xd4, 0xa5, 0xe1, 0x37,
	0xa1, 0xbe, 0x3d, 0x9d, 0x89, 0x85, 0xdf, 0x87, 0xd6, 0xe1, 0xc6, 0x66, 0x32, 0x8f, 0x47, 0x9c,
	0x5c, 0x86, 0x3a, 0x17, 0x34, 0x15, 0x9e, 0xd5, 0xb5, 0x7a, 0x4e, 0xa0, 0x0c, 0xd2, 0x81, 0x1a,
	0x8b, 0x47, 0x5e, 0x55, 0xfa, 0xf0, 0xd3, 0xff, 0xb5, 0x86, 0x83, 0x06, 0xec, 0x6d, 0x14, 0x32,
	0x72, 0x1d, 0x1c, 0x11, 0x4d, 0x19, 0x17, 0x74, 0x3a, 0xd3, 0x03, 0x73, 0x07, 0x59, 0x85, 0x6a,
	0x64, 0xc6, 0x56, 0xa3, 0x11, 0x21, 0x60, 0x8b, 0xc5, 0x8c, 0x79, 0x35, 0xe9, 0x91, 0xdf, 0xe4,
	0x2a, 0x34, 0x66, 0x93, 0xf9, 0x38, 0x8a, 0x3d, 0x5b, 0x7a, 0xb5, 0x85, 0xd8, 0x28, 0x7e, 0x93,
	0x78, 0x75, 0x85, 0xc5, 0x6f, 0xf2, 0x39, 0xb4, 0xa6, 0x4c, 0xd0, 0x11, 0x15, 0xd4, 0x6b, 0x74,
	0x6b, 0x3d, 0xb7, 0xff, 0xef, 0x75, 0xb5, 0x3d, 0x93, 0xd0, 0xfa, 0x37, 0x3a, 0xbe, 0x1d, 0x8b,
	0x74, 0x11, 0x64, 0x70, 0xf2, 0x25, 0xb4, 0x43, 0x3a, 0xa3, 0xc3, 0x68, 0x12, 0x89, 0x88, 0x71,
	0xaf, 0xd9, 0xb5, 0x7a, 0x6e, 0xff, 0xda, 0xd2, 0xf0, 0x2d, 0x03, 0x59, 0x04, 0x25, 0x38, 0xe9,
	0x82, 0x2d, 0xe8, 0x98, 0x7b, 0x2d, 0xb9, 0x6a, 0x3b, 0x1b, 0x76, 0x40, 0xc7, 0x81, 0x8c, 0x90,
	0x4f, 0xa1, 0x99, 0xcc, 0xc5, 0x6c, 0x2e, 0xb8, 0xe7, 0x48, 0xd0, 0x95, 0xa5, 0xb9, 0xf7, 0x65,
	0x34, 0x30, 0x28, 0x3c, 0x3a, 0x9e, 0xa4, 0x62, 0x37, 0x1e, 0xb1, 0x77, 0x1e, 0x74, 0xad, 0x5e,
	0x3d, 0xc8, 0x1d, 0x6b, 0x5f, 0xc0, 0x4a, 0x69, 0x2b, 0x58, 0x88, 0x63, 0xb6, 0xd0, 0x67, 0x8c,
	0x9f, 0x58, 0xb0, 0xb7, 0x74, 0x32, 0x67, 0xfa, 0x80, 0x95, 0xf1, 0xa8, 0xfa, 0x99, 0xe5, 0x7f,
	0x0b, 0xe4, 0xe4, 0x8e, 0xf0, 0x44, 0xa7, 0xc9, 0x88, 0xe9, 0x29, 0xe4, 0x37, 0x59, 0x87, 0xfa,
	0x0f, 0x69, 0x24, 0xd4, 0x1c, 0x6e, 0xdf, 0xcb, 0x72, 0x7e, 0x85, 0xde, 0xc2, 0x71, 0x28, 0x98,
	0xff, 0x9b, 0x05, 0xab, 0xe5, 0x0d, 0xe1, 0xb4, 0x31, 0x9d, 0x66, 0xd3, 0xe2, 0x77, 0x56, 0xe8,
	0x6a, 0xa1, 0xd0, 0xd7, 0xc1, 0x99, 0xa5, 0x2c, 0x8c, 0x78, 0x94, 0xc4, 0x92, 0x01, 0xf5, 0x20,
	0x77, 0x90, 0xff, 0xc1, 0x0a, 0x0f, 0xe9, 0x24, 0x8a, 0xc7, 0x4f, 0x69, 0x28, 0x92, 0x54, 0xb2,
	0xc1, 0x0a, 0xca, 0x4e, 0x72, 0x0b, 0xec, 0x79, 0x1c, 0x09, 0x49, 0x0a, 0xb7, 0x7f, 0x29, 0xcb,
	0x56, 0xa5, 0xf2, 0x32, 0x8e, 0x44, 0x20, 0x01, 0xfe, 0x00, 0x3a, 0x26, 0xcd, 0x17, 0x6c, 0xc2,
	0xe4, 0x60, 0x53, 0x43, 0xeb, 0xcc, 0x1a, 0x2e, 0xf1, 0xd5, 0xff, 0xd1, 0x42, 0xaa, 0xef, 0x30,
	0x3a, 0x11, 0x47, 0xe7, 0x50, 0xfd, 0x0e, 0x34, 0xb8, 0xa0, 0x62, 0xce, 0xe5, 0xf0, 0xd5, 0x2c,
	0x37, 0x35, 0xf8, 0x85, 0x0c, 0x05, 0x1a, 0x42, 0x3e, 0x81, 0x46, 0x78, 0xc4, 0xc2, 0x63, 0xee,
	0xd5, 0x64, 0x2e, 0x97, 0xb3, 0x5c, 0x14, 0x7c, 0x0b, 0x83, 0x81, 0xc6, 0xf8, 0xbf, 0x58, 0xb0,
	0x52, 0x8a, 0x9c, 0x7a, 0xe4, 0x1f, 0x94, 0x80, 0x07, 0xcd, 0x29, 0xe3, 0x9c, 0x8e, 0x4d, 0x2f,
	0x1a, 0xb3, 0xbc, 0x4b, 0x7b, 0x79, 0x97, 0xa6, 0xae, 0xf5, 0xbc, 0xae, 0xfe, 0xcf, 0x16, 0xc0,
	0xe1, 0x86, 0x21, 0xeb, 0xa9, 0xb9, 0xdd, 0x00, 0x98, 0xd2, 0x28, 0x16, 0x34, 0x8a, 0x59, 0xaa,
	0xcf, 0xb7, 0xe0, 0x41, 0x6e, 0x0b, 0x3a, 0xd6, 0xa9, 0xe0, 0x27, 0xe9, 0x82, 0x3b, 0x62, 0x3c,
	0x4c, 0xa3, 0x99, 0x40, 0xba, 0xa8, 0x44, 0x8a, 0x2e, 0x1c, 0xf3, 0x36, 0xe4, 0x3a, 0x13, 0xfc,
	0xf4, 0x1f, 0x41, 0xbb, 0xc8, 0x84, 0x53, 0x33, 0xb9, 0x0a, 0x0d, 0xbe, 0x98, 0x0e, 0x93, 0x89,
	0xce, 0x42, 0x5b, 0xfe, 0x1f, 0x36, 0x38, 0x87, 0x1b, 0x01, 0xa3, 0xa3, 0x28, 0x1e, 0x6b, 0x1e,
	0x58, 0x99, 0x6e, 0x95, 0x0e, 0xa5, 0x7a, 0xd6, 0xa1, 0x14, 0x55, 0xed, 0x06, 0xc0, 0x48, 0xb2,
	0xef, 0x00, 0x23, 0x2a, 0xfd, 0x82, 0x87, 0x3c, 0x84, 0x66, 0x98, 0xc4, 0x82, 0xbd, 0x43, 0x2e,
	0x97, 0x85, 0x4c, 0x27, 0xb1, 0xbe, 0xa5, 0xe2, 0x4a, 0xc8, 0x0c, 0x3a, 0xeb, 0x80, 0xc6, 0x39,
	0x1d, 0x40, 0x6e, 0x42, 0x9b, 0x8b, 0x34, 0x8a, 0xc7, 0xdf, 0x29, 0x91, 0x40, 0xc1, 0x73, 0x76,
	0x2a, 0x81, 0xab, 0xbc, 0x87, 0xe8, 0x24, 0xff, 0x01, 0x18, 0x26, 0xc9, 0x44, 0x43, 0x5a, 0x5d,
	0xab, 0xd7, 0xda, 0xa9, 0x04, 0x0e, 0xfa, 0x14, 0xe0, 0xff, 0xb0, 0xf2, 0x66, 0x92, 0x50, 0xb1,
	0xd1, 0xd7, 0x18, 0xa7, 0x6b, 0xf5, 0xaa, 0x3b, 0x95, 0xa0, 0xad, 0xdd, 0x65, 0xd8, 0x83, 0xfb,
	0x1a, 0x86, 0x7a, 0x66, 0x65, 0xb0, 0x07, 0xf7, 0x15, 0xec, 0xbf, 0xe0, 0x46, 0x71, 0x3e, 0x97,
	0x8b, 0x22, 0xb0, 0x53, 0x09, 0x40, 0x3a, 0x8b, 0x90, 0x6c, 0x9e, 0x76, 0xd7, 0xea, 0xd5, 0x34,
	0xa4, 0x30, 0xcb, 0x70, 0x21, 0x18, 0xd7, 0x90, 0x95, 0xae, 0xd5, 0x6b, 0x23, 0x44, 0x3a, 0x15,
	0xe4, 0x26, 0xb4, 0xe7, 0xc5, 0x95, 0x56, 0xbb, 0x56, 0x6f, 0x05, 0x37, 0x3f, 0x2f, 0x2c, 0xa5,
	0x41, 0xd9, 0x5a, 0x17, 0xba, 0x56, 0xcf, 0x36, 0x20, 0xbd, 0xd8, 0xda, 0x23, 0x68, 0x17, 0x0b,
	0xf1, 0x21, 0x32, 0xbc, 0xd9, 0xd4, 0x11, 0x7f, 0x80, 0x0d, 0x8c, 0x75, 0x0d, 0xd8, 0xf7, 0x73,
	0xc6, 0x05, 0xd9, 0x80, 0x16, 0xd7, 0xb2, 0x24, 0xa7, 0x72, 0xfb, 0xff, 0x5a, 0xba, 0x2d, 0x8c,
	0x6a, 0x05, 0x19, 0xd0, 0x7f, 0x0d, 0x75, 0x29, 0x56, 0x48, 0x47, 0x24, 0x33, 0x9f, 0xd1, 0xd0,
	0xb0, 0x3b, 0x77, 0x20, 0xf5, 0x68, 0x1c, 0x27, 0x82, 0xca, 0xce, 0xd1, 0xcd, 0x96, 0x7b, 0x30,
	0xdf, 0x09, 0x1d, 0xb2, 0x89, 0xe6, 0xab, 0x32, 0xfc, 0x1b, 0xd8, 0x3c, 0x07, 0x8c, 0x0b, 0xa5,
	0x14, 0xd8, 0x02, 0xc9, 0xb1, 0x9c, 0xbc, 0x15, 0x54, 0x93, 0x63, 0xff, 0x16, 0x5c, 0x39, 0xdc,
	0x38, 0x48, 0x69, 0xcc, 0x69, 0x88, 0xd3, 0x64, 0xaa, 0xba, 0xd4, 0x2b, 0xfe, 0x9f, 0x16, 0x5c,
	0x2a, 0x23, 0xb3, 0x09, 0x4b, 0x3d, 0xe5, 0x41, 0x33, 0x4c, 0x19, 0x15, 0xcc, 0x08, 0xae, 0x31,
	0x31, 0x32, 0x9f, 0x8d, 0x64, 0x44, 0x8b, 0x93, 0x36, 0x8b, 0xb2, 0x65, 0x97, 0x65, 0xcb, 0x83,
	0x26, 0x36, 0x64, 0x32, 0x17, 0x5a, 0x11, 0x8c, 0x49, 0x6e, 0x67, 0xba, 0xd8, 0x90, 0xba, 0x48,
	0xf4, 0x41, 0xcb, 0x0b, 0xee, 0x84, 0x2e, 0x67, 0x5d, 0xa9, 0xde, 0x07, 0xa4, 0x7c, 0x1f, 0x0e,
	0xa8, 0xa0, 0x59, 0x2b, 0xfa, 0xbf, 0x5b, 0xa8, 0x19, 0x87, 0x2c, 0x35, 0x17, 0x98, 0x7a, 0xb9,
	0x68, 0x87, 0xde, 0x6a, 0xd9, 0x89, 0xc5, 0xe1, 0xa3, 0x63, 0x03, 0xd1, 0xc5, 0xc9, 0x3d, 0x58,
	0xda, 0xe1, 0x3c, 0x9a, 0x8c, 0x06, 0x54, 0x18, 0x41, 0xc9, 0x1d, 0x18, 0x1d, 0x47, 0x62, 0x2b,
	0x99, 0x4e, 0x23, 0x61, 0xc4, 0x39, 0x73, 0xa0, 0xb6, 0x8d, 0x23, 0x71, 0x40, 0xc7, 0xfa, 0x08,
	0xb4, 0x85, 0xfa, 0x44, 0xd3, 0xf0, 0x48, 0xee, 0xdf, 0x09, 0xe4, 0xb7, 0x2c, 0xaf, 0x7a, 0x04,
	0x39, 0x41, 0x35, 0xe1, 0xfe, 0x5d, 0xb8, 0x78, 0xe2, 0xce, 0xc7, 0x43, 0x55, 0x25, 0x54, 0x77,
	0xa6, 0x13, 0x18, 0xd3, 0x7f, 0x0d, 0x6e, 0xe1, 0x48, 0x70, 0x65, 0x15, 0xd1, 0x9b, 0xd6, 0x16,
	0xae, 0x2c, 0xdf, 0x6a, 0xb8, 0xcf, 0x76, 0x20, 0xbf, 0x51, 0xd9, 0x45, 0x4e, 0x0e, 0xbd, 0xc7,
	0xa2, 0xcb, 0x9f, 0xe2, 0x13, 0x43, 0x4e, 0xfe, 0x9c, 0x2e, 0x26, 0x09, 0x1d, 0xfd, 0xa3, 0x76,
	0x21, 0x1f, 0x65, 0x8b, 0xd7, 0xce, 0xa8, 0xa4, 0x8c, 0xfb, 0x3f, 0x59, 0xf8, 0x5a, 0x92, 0xde,
	0x02, 0x6b, 0x4f, 0xf0, 0xf5, 0x2a, 0x34, 0x94, 0x7e, 0x9b, 0x9b, 0x43, 0x59, 0x45, 0xce, 0xd4,
	0xce, 0xe5, 0x4c, 0x91, 0xa7, 0x76, 0x89, 0xa7, 0xb7, 0xef, 0x41, 0xbb, 0x78, 0x55, 0x13, 0x17,
	0x9a, 0x2f, 0xf7, 0x9e, 0xed, 0xed, 0xbf, 0xda, 0xeb, 0x54, 0x48, 0x03, 0xaa, 0xfb, 0xcf, 0x3a,
	0x16, 0x3a, 0x9f, 0x3e, 0xd9, 0xfd, 0x7a, 0x77, 0xef, 0xab, 0x4e, 0xf5, 0xf6, 0x63, 0x70, 0x0b,
	0x24, 0xc6, 0xd8, 0xf3, 0xed, 0xbd, 0x01, 0xc6, 0x2a, 0x68, 0xbc, 0x0a, 0x76, 0x0f, 0xd0, 0xb0,
	0x48, 0x0b, 0xec, 0xc1, 0xfe, 0xde, 0x76, 0xa7, 0x46, 0x1c, 0xa8, 0x6f, 0x07, 0xc1, 0x7e, 0xd0,
	0xb1, 0xfb, 0x7f, 0xd9, 0xf8, 0xb6, 0x79, 0xae, 0x1e, 0xdb, 0x0f, 0xa1, 0xa9, 0xce, 0x91, 0x93,
	0xb3, 0x4e, 0x76, 0xed, 0xc2, 0x52, 0xc0, 0xaf, 0xdc, 0xb3, 0xc8, 0xc7, 0xd0, 0xd0, 0xcf, 0x23,
	0xf3, 0x9e, 0x92, 0x3f, 0x16, 0x05, 0xb0, 0x0a, 0xfb, 0x15, 0x72, 0x17, 0x5a, 0xd9, 0x23, 0xa1,
	0x0c, 0xbe, 0x98, 0x81, 0x0d, 0xc0, 0xaf, 0x90, 0x3e, 0xd8, 0xa8, 0x98, 0xe4, 0x72, 0xe9, 0x62,
	0xd4, 0x02, 0xba, 0xd6, 0x59, 0xbe, 0x2e, 0x65, 0x36, 0x7d, 0x70, 0xd0, 0xdc, 0xa2, 0xe1, 0x11,
	0x23, 0x79, 0x0a, 0xea, 0x07, 0xe7, 0x8c, 0x31, 0x77, 0xc0, 0x46, 0xd9, 0x5b, 0x4a, 0x29, 0xbf,
	0x58, 0x73, 0x4d, 0xf4, 0x2b, 0x64, 0x17, 0xdc, 0x22, 0x47, 0xae, 0xe7, 0xa8, 0x93, 0xca, 0xb8,
	0xb6, 0x76, 0x6a, 0xd4, 0x4c, 0xf5, 0x18, 0xda, 0x05, 0x37, 0x5f, 0x5a, 0xff, 0xbd, 0x63, 0x65,
	0xd6, 0x4d, 0x23, 0x19, 0xe5, 0x81, 0xf9, 0x26, 0x75, 0xdc, 0xaf, 0x90, 0x4d, 0x00, 0x49, 0x94,
	0x27, 0x7c, 0x11, 0x87, 0xe4, 0x4a, 0x99, 0x9f, 0xba, 0xc7, 0xd6, 0xae, 0x95, 0xdd, 0x85, 0x65,
	0xe5, 0x82, 0x9b, 0xe0, 0x28, 0xb2, 0xbd, 0x67, 0x8a, 0x73, 0x92, 0x1e, 0x36, 0xe4, 0x4f, 0xe8,
	0xc6, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x08, 0x78, 0xa5, 0x7e, 0x93, 0x0e, 0x00, 0x00,
}
