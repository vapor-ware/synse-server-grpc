// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synse.proto

/*
Package synse is a generated protocol buffer package.

It is generated from these files:
	synse.proto

It has these top-level messages:
	DeviceFilter
	Empty
	Status
	PluginHealth
	HealthCheck
	DeviceCapability
	Metadata
	VersionInfo
	Reading
	WriteInfo
	WriteData
	WriteResponse
	TransactionFilter
	Transactions
	Device
	Location
	Output
	Unit
*/
package synse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PluginHealth_Status int32

const (
	PluginHealth_UNKNOWN            PluginHealth_Status = 0
	PluginHealth_OK                 PluginHealth_Status = 1
	PluginHealth_PARTIALLY_DEGRADED PluginHealth_Status = 3
	PluginHealth_FAILING            PluginHealth_Status = 4
)

var PluginHealth_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	3: "PARTIALLY_DEGRADED",
	4: "FAILING",
}
var PluginHealth_Status_value = map[string]int32{
	"UNKNOWN":            0,
	"OK":                 1,
	"PARTIALLY_DEGRADED": 3,
	"FAILING":            4,
}

func (x PluginHealth_Status) String() string {
	return proto.EnumName(PluginHealth_Status_name, int32(x))
}
func (PluginHealth_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type WriteResponse_WriteStatus int32

const (
	WriteResponse_UNKNOWN WriteResponse_WriteStatus = 0
	WriteResponse_PENDING WriteResponse_WriteStatus = 1
	WriteResponse_WRITING WriteResponse_WriteStatus = 2
	WriteResponse_DONE    WriteResponse_WriteStatus = 3
)

var WriteResponse_WriteStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "PENDING",
	2: "WRITING",
	3: "DONE",
}
var WriteResponse_WriteStatus_value = map[string]int32{
	"UNKNOWN": 0,
	"PENDING": 1,
	"WRITING": 2,
	"DONE":    3,
}

func (x WriteResponse_WriteStatus) String() string {
	return proto.EnumName(WriteResponse_WriteStatus_name, int32(x))
}
func (WriteResponse_WriteStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11, 0}
}

type WriteResponse_WriteState int32

const (
	WriteResponse_OK    WriteResponse_WriteState = 0
	WriteResponse_ERROR WriteResponse_WriteState = 1
)

var WriteResponse_WriteState_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}
var WriteResponse_WriteState_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x WriteResponse_WriteState) String() string {
	return proto.EnumName(WriteResponse_WriteState_name, int32(x))
}
func (WriteResponse_WriteState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 1} }

// DeviceFilter is a message that specifies the routing information for
// a device. This can also be used as a filter for partial routing info
// by only specifying the rack or the rack+board.
type DeviceFilter struct {
	// The rack identifier.
	Rack string `protobuf:"bytes,1,opt,name=rack" json:"rack,omitempty"`
	// The board identifier.
	Board string `protobuf:"bytes,2,opt,name=board" json:"board,omitempty"`
	// The device identifier.
	Device string `protobuf:"bytes,3,opt,name=device" json:"device,omitempty"`
}

func (m *DeviceFilter) Reset()                    { *m = DeviceFilter{} }
func (m *DeviceFilter) String() string            { return proto.CompactTextString(m) }
func (*DeviceFilter) ProtoMessage()               {}
func (*DeviceFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DeviceFilter) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *DeviceFilter) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *DeviceFilter) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

// Empty is a message that contains no data.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Status is the response of the `Test` rpc call. In general, it should
// always return with the 'ok' field being true.
type Status struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// PluginHealth is the response to the `Health` rpc call. It provides a
// health status summarizing the plugin's health, as well as a list of the
// `HealthCheck`s which make up that status.
type PluginHealth struct {
	// The time that the health was checked.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The overall health status.
	Status PluginHealth_Status `protobuf:"varint,2,opt,name=status,enum=synse.PluginHealth_Status" json:"status,omitempty"`
	// All the health checks of the plugin that make up the overall health.
	Checks []*HealthCheck `protobuf:"bytes,3,rep,name=checks" json:"checks,omitempty"`
}

func (m *PluginHealth) Reset()                    { *m = PluginHealth{} }
func (m *PluginHealth) String() string            { return proto.CompactTextString(m) }
func (*PluginHealth) ProtoMessage()               {}
func (*PluginHealth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PluginHealth) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *PluginHealth) GetStatus() PluginHealth_Status {
	if m != nil {
		return m.Status
	}
	return PluginHealth_UNKNOWN
}

func (m *PluginHealth) GetChecks() []*HealthCheck {
	if m != nil {
		return m.Checks
	}
	return nil
}

// HealthCheck is an individual health metric that makes up the plugin health.
type HealthCheck struct {
	// The name of the health check.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The status of the health check.
	Status PluginHealth_Status `protobuf:"varint,2,opt,name=status,enum=synse.PluginHealth_Status" json:"status,omitempty"`
	// Any additional info associated with the health check.
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *HealthCheck) Reset()                    { *m = HealthCheck{} }
func (m *HealthCheck) String() string            { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()               {}
func (*HealthCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HealthCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HealthCheck) GetStatus() PluginHealth_Status {
	if m != nil {
		return m.Status
	}
	return PluginHealth_UNKNOWN
}

func (m *HealthCheck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// DeviceCapability identifies a device kind and the potential kinds of readings
// that it supports.
type DeviceCapability struct {
	// The kind/type of the device.
	Kind string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// The outputs that the device supports.
	Outputs []string `protobuf:"bytes,2,rep,name=outputs" json:"outputs,omitempty"`
}

func (m *DeviceCapability) Reset()                    { *m = DeviceCapability{} }
func (m *DeviceCapability) String() string            { return proto.CompactTextString(m) }
func (*DeviceCapability) ProtoMessage()               {}
func (*DeviceCapability) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeviceCapability) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *DeviceCapability) GetOutputs() []string {
	if m != nil {
		return m.Outputs
	}
	return nil
}

// Metadata is the response to the `Metainfo` rpc call.
type Metadata struct {
	Name        string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Maintainer  string       `protobuf:"bytes,2,opt,name=maintainer" json:"maintainer,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Vcs         string       `protobuf:"bytes,4,opt,name=vcs" json:"vcs,omitempty"`
	Version     *VersionInfo `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetMaintainer() string {
	if m != nil {
		return m.Maintainer
	}
	return ""
}

func (m *Metadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Metadata) GetVcs() string {
	if m != nil {
		return m.Vcs
	}
	return ""
}

func (m *Metadata) GetVersion() *VersionInfo {
	if m != nil {
		return m.Version
	}
	return nil
}

// VersionInfo is the response to the `Version` rpc call.
type VersionInfo struct {
	PluginVersion string `protobuf:"bytes,1,opt,name=pluginVersion" json:"pluginVersion,omitempty"`
	SdkVersion    string `protobuf:"bytes,2,opt,name=sdkVersion" json:"sdkVersion,omitempty"`
	BuildDate     string `protobuf:"bytes,3,opt,name=buildDate" json:"buildDate,omitempty"`
	GitCommit     string `protobuf:"bytes,4,opt,name=gitCommit" json:"gitCommit,omitempty"`
	GitTag        string `protobuf:"bytes,5,opt,name=gitTag" json:"gitTag,omitempty"`
	Arch          string `protobuf:"bytes,6,opt,name=arch" json:"arch,omitempty"`
	Os            string `protobuf:"bytes,7,opt,name=os" json:"os,omitempty"`
}

func (m *VersionInfo) Reset()                    { *m = VersionInfo{} }
func (m *VersionInfo) String() string            { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()               {}
func (*VersionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VersionInfo) GetPluginVersion() string {
	if m != nil {
		return m.PluginVersion
	}
	return ""
}

func (m *VersionInfo) GetSdkVersion() string {
	if m != nil {
		return m.SdkVersion
	}
	return ""
}

func (m *VersionInfo) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

func (m *VersionInfo) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionInfo) GetGitTag() string {
	if m != nil {
		return m.GitTag
	}
	return ""
}

func (m *VersionInfo) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *VersionInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

// Reading is the response to the `Read` rpc call.
type Reading struct {
	// The time which the reading was taken.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The type of reading.
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// The value of the reading.
	//
	// Types that are valid to be assigned to Value:
	//	*Reading_StringValue
	//	*Reading_BoolValue
	//	*Reading_Float32Value
	//	*Reading_Float64Value
	//	*Reading_Int32Value
	//	*Reading_Int64Value
	//	*Reading_BytesValue
	//	*Reading_Uint32Value
	//	*Reading_Uint64Value
	Value isReading_Value `protobuf_oneof:"value"`
}

func (m *Reading) Reset()                    { *m = Reading{} }
func (m *Reading) String() string            { return proto.CompactTextString(m) }
func (*Reading) ProtoMessage()               {}
func (*Reading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isReading_Value interface {
	isReading_Value()
}

type Reading_StringValue struct {
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}
type Reading_BoolValue struct {
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,oneof"`
}
type Reading_Float32Value struct {
	Float32Value float32 `protobuf:"fixed32,5,opt,name=float32_value,json=float32Value,oneof"`
}
type Reading_Float64Value struct {
	Float64Value float64 `protobuf:"fixed64,6,opt,name=float64_value,json=float64Value,oneof"`
}
type Reading_Int32Value struct {
	Int32Value int32 `protobuf:"varint,7,opt,name=int32_value,json=int32Value,oneof"`
}
type Reading_Int64Value struct {
	Int64Value int64 `protobuf:"varint,8,opt,name=int64_value,json=int64Value,oneof"`
}
type Reading_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,9,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}
type Reading_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,10,opt,name=uint32_value,json=uint32Value,oneof"`
}
type Reading_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,11,opt,name=uint64_value,json=uint64Value,oneof"`
}

func (*Reading_StringValue) isReading_Value()  {}
func (*Reading_BoolValue) isReading_Value()    {}
func (*Reading_Float32Value) isReading_Value() {}
func (*Reading_Float64Value) isReading_Value() {}
func (*Reading_Int32Value) isReading_Value()   {}
func (*Reading_Int64Value) isReading_Value()   {}
func (*Reading_BytesValue) isReading_Value()   {}
func (*Reading_Uint32Value) isReading_Value()  {}
func (*Reading_Uint64Value) isReading_Value()  {}

func (m *Reading) GetValue() isReading_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Reading) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Reading) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Reading) GetStringValue() string {
	if x, ok := m.GetValue().(*Reading_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *Reading) GetBoolValue() bool {
	if x, ok := m.GetValue().(*Reading_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *Reading) GetFloat32Value() float32 {
	if x, ok := m.GetValue().(*Reading_Float32Value); ok {
		return x.Float32Value
	}
	return 0
}

func (m *Reading) GetFloat64Value() float64 {
	if x, ok := m.GetValue().(*Reading_Float64Value); ok {
		return x.Float64Value
	}
	return 0
}

func (m *Reading) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*Reading_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *Reading) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Reading_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Reading) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*Reading_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (m *Reading) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*Reading_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *Reading) GetUint64Value() uint64 {
	if x, ok := m.GetValue().(*Reading_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Reading) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Reading_OneofMarshaler, _Reading_OneofUnmarshaler, _Reading_OneofSizer, []interface{}{
		(*Reading_StringValue)(nil),
		(*Reading_BoolValue)(nil),
		(*Reading_Float32Value)(nil),
		(*Reading_Float64Value)(nil),
		(*Reading_Int32Value)(nil),
		(*Reading_Int64Value)(nil),
		(*Reading_BytesValue)(nil),
		(*Reading_Uint32Value)(nil),
		(*Reading_Uint64Value)(nil),
	}
}

func _Reading_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Reading)
	// value
	switch x := m.Value.(type) {
	case *Reading_StringValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.StringValue)
	case *Reading_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Reading_Float32Value:
		b.EncodeVarint(5<<3 | proto.WireFixed32)
		b.EncodeFixed32(uint64(math.Float32bits(x.Float32Value)))
	case *Reading_Float64Value:
		b.EncodeVarint(6<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Float64Value))
	case *Reading_Int32Value:
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int32Value))
	case *Reading_Int64Value:
		b.EncodeVarint(8<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Reading_BytesValue:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.BytesValue)
	case *Reading_Uint32Value:
		b.EncodeVarint(10<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint32Value))
	case *Reading_Uint64Value:
		b.EncodeVarint(11<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Uint64Value))
	case nil:
	default:
		return fmt.Errorf("Reading.Value has unexpected type %T", x)
	}
	return nil
}

func _Reading_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Reading)
	switch tag {
	case 3: // value.string_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &Reading_StringValue{x}
		return true, err
	case 4: // value.bool_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Reading_BoolValue{x != 0}
		return true, err
	case 5: // value.float32_value
		if wire != proto.WireFixed32 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed32()
		m.Value = &Reading_Float32Value{math.Float32frombits(uint32(x))}
		return true, err
	case 6: // value.float64_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Reading_Float64Value{math.Float64frombits(x)}
		return true, err
	case 7: // value.int32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Reading_Int32Value{int32(x)}
		return true, err
	case 8: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Reading_Int64Value{int64(x)}
		return true, err
	case 9: // value.bytes_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Value = &Reading_BytesValue{x}
		return true, err
	case 10: // value.uint32_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Reading_Uint32Value{uint32(x)}
		return true, err
	case 11: // value.uint64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Reading_Uint64Value{x}
		return true, err
	default:
		return false, nil
	}
}

func _Reading_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Reading)
	// value
	switch x := m.Value.(type) {
	case *Reading_StringValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.StringValue)))
		n += len(x.StringValue)
	case *Reading_BoolValue:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *Reading_Float32Value:
		n += proto.SizeVarint(5<<3 | proto.WireFixed32)
		n += 4
	case *Reading_Float64Value:
		n += proto.SizeVarint(6<<3 | proto.WireFixed64)
		n += 8
	case *Reading_Int32Value:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int32Value))
	case *Reading_Int64Value:
		n += proto.SizeVarint(8<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Reading_BytesValue:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.BytesValue)))
		n += len(x.BytesValue)
	case *Reading_Uint32Value:
		n += proto.SizeVarint(10<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Uint32Value))
	case *Reading_Uint64Value:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Uint64Value))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// WriteInfo is the request message for the `Write` rpc call. It specifies a
// filter for the device to write to, as well as actions/data for the write.
type WriteInfo struct {
	// The specifier for the device to write to.
	DeviceFilter *DeviceFilter `protobuf:"bytes,1,opt,name=deviceFilter" json:"deviceFilter,omitempty"`
	// The data to write to the device.
	Data []*WriteData `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *WriteInfo) Reset()                    { *m = WriteInfo{} }
func (m *WriteInfo) String() string            { return proto.CompactTextString(m) }
func (*WriteInfo) ProtoMessage()               {}
func (*WriteInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *WriteInfo) GetDeviceFilter() *DeviceFilter {
	if m != nil {
		return m.DeviceFilter
	}
	return nil
}

func (m *WriteInfo) GetData() []*WriteData {
	if m != nil {
		return m.Data
	}
	return nil
}

// WriteData is the data that gets written on a `Write` rpc call.
type WriteData struct {
	// The action string for the device write.
	Action string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	// The data to write.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteData) Reset()                    { *m = WriteData{} }
func (m *WriteData) String() string            { return proto.CompactTextString(m) }
func (*WriteData) ProtoMessage()               {}
func (*WriteData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *WriteData) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *WriteData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// WriteResponse is the response for a `Transaction` rpc call. It gives the
// status of the transaction. Transactions correspond with write requests.
// Since writes are performed asynchronously, the transaction id is used to
// track the progress of that transaction.
type WriteResponse struct {
	// The time at which the write transaction was created.
	Created string `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	// The time at which the write transaction state/status was last updated.
	Updated string `protobuf:"bytes,2,opt,name=updated" json:"updated,omitempty"`
	// The status of the transaction. This describes what stage of processing
	// the transaction is at.
	Status WriteResponse_WriteStatus `protobuf:"varint,3,opt,name=status,enum=synse.WriteResponse_WriteStatus" json:"status,omitempty"`
	// The state of the transaction. This describes the so called "health"
	// of the transaction.
	State WriteResponse_WriteState `protobuf:"varint,4,opt,name=state,enum=synse.WriteResponse_WriteState" json:"state,omitempty"`
	// The message field will be used to specify any context information
	// when the state is ERROR. If the state is OK, this field will
	// remain empty.
	Message string `protobuf:"bytes,5,opt,name=message" json:"message,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *WriteResponse) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *WriteResponse) GetUpdated() string {
	if m != nil {
		return m.Updated
	}
	return ""
}

func (m *WriteResponse) GetStatus() WriteResponse_WriteStatus {
	if m != nil {
		return m.Status
	}
	return WriteResponse_UNKNOWN
}

func (m *WriteResponse) GetState() WriteResponse_WriteState {
	if m != nil {
		return m.State
	}
	return WriteResponse_OK
}

func (m *WriteResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// TransactionFilter is a filter for transaction checks. If its id field is
// set, the plugin will only check the state for that transaction. If the id
// field is empty, the plugin will return the state for all active transactions.
type TransactionFilter struct {
	// The id of the transaction to check.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TransactionFilter) Reset()                    { *m = TransactionFilter{} }
func (m *TransactionFilter) String() string            { return proto.CompactTextString(m) }
func (*TransactionFilter) ProtoMessage()               {}
func (*TransactionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TransactionFilter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Transactions specifies the asynchronous transactions for each of the writes
// for a `Write` rpc call. Each transaction identifies a single write action
// with a unique transaction id and context to help identify which transaction
// that id corresponds to.
//
// The transaction id can later be passed back to the `Transaction` rpc call
// to get the status of that write.
type Transactions struct {
	// A map where the key is the transaction id for a `WriteData` within the
	// `WriteInfo`, and the value is that same `WriteData`, provided as context.
	Transactions map[string]*WriteData `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Transactions) GetTransactions() map[string]*WriteData {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// Device is the response to the `Devices` rpc call. It provides all of the
// info that describes a device. This is used by Synse Server for its 'scan'
// and 'info' endpoints.
type Device struct {
	// The time at which the device info was gathered.
	Timestamp string `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// The unique id for the device.
	Uid string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	// The device kind. This can also be thought of as 'device type'.
	Kind string `protobuf:"bytes,3,opt,name=kind" json:"kind,omitempty"`
	// Any metadata associated with the device.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The name of the plugin that the device is managed by.
	Plugin string `protobuf:"bytes,5,opt,name=plugin" json:"plugin,omitempty"`
	// Any additional information specified for the device.
	Info string `protobuf:"bytes,6,opt,name=info" json:"info,omitempty"`
	// The location of the device, as specified by rack and board
	// identifiers.
	Location *Location `protobuf:"bytes,7,opt,name=location" json:"location,omitempty"`
	// The reading output of the device. This specifies all of the
	// outputs a device can generate when read. Many devices will have
	// a single output, but some devices (e.g. a humidity sensor) could
	// return multiple data points from a single reading (e.g.
	// temperature and humidity).
	Output []*Output `protobuf:"bytes,8,rep,name=output" json:"output,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Device) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *Device) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Device) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *Device) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Device) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *Device) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *Device) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Device) GetOutput() []*Output {
	if m != nil {
		return m.Output
	}
	return nil
}

// Location is the location specification for a device.
type Location struct {
	// The rack which the device belongs to.
	Rack string `protobuf:"bytes,1,opt,name=rack" json:"rack,omitempty"`
	// The board which the device belongs to.
	Board string `protobuf:"bytes,2,opt,name=board" json:"board,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Location) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Location) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

// Output is the specification for one of a device's reading outputs.
type Output struct {
	// The name of the output. This is namespaced.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The type of the output. This is the last element of the namespace.
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// The data type of the output (e.g. int, string, bool, etc).
	DataType string `protobuf:"bytes,3,opt,name=dataType" json:"dataType,omitempty"`
	// The decimal precision of the output. This is ignored if the output
	// dataType is not a float.
	Precision int32 `protobuf:"varint,4,opt,name=precision" json:"precision,omitempty"`
	// The scaling factor to multiply the reading result by. This can be
	// positive or negative, whole or decimal.
	ScalingFactor float64 `protobuf:"fixed64,5,opt,name=scalingFactor" json:"scalingFactor,omitempty"`
	// The unit of measure for the reading.
	Unit *Unit `protobuf:"bytes,6,opt,name=unit" json:"unit,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Output) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Output) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Output) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *Output) GetPrecision() int32 {
	if m != nil {
		return m.Precision
	}
	return 0
}

func (m *Output) GetScalingFactor() float64 {
	if m != nil {
		return m.ScalingFactor
	}
	return 0
}

func (m *Output) GetUnit() *Unit {
	if m != nil {
		return m.Unit
	}
	return nil
}

// Unit is the unit specification for a reading output.
type Unit struct {
	// The full name of the unit, e.g. "degrees celsius".
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The symbol for the unit, e.g. "C".
	Symbol string `protobuf:"bytes,2,opt,name=symbol" json:"symbol,omitempty"`
}

func (m *Unit) Reset()                    { *m = Unit{} }
func (m *Unit) String() string            { return proto.CompactTextString(m) }
func (*Unit) ProtoMessage()               {}
func (*Unit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Unit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Unit) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func init() {
	proto.RegisterType((*DeviceFilter)(nil), "synse.DeviceFilter")
	proto.RegisterType((*Empty)(nil), "synse.Empty")
	proto.RegisterType((*Status)(nil), "synse.Status")
	proto.RegisterType((*PluginHealth)(nil), "synse.PluginHealth")
	proto.RegisterType((*HealthCheck)(nil), "synse.HealthCheck")
	proto.RegisterType((*DeviceCapability)(nil), "synse.DeviceCapability")
	proto.RegisterType((*Metadata)(nil), "synse.Metadata")
	proto.RegisterType((*VersionInfo)(nil), "synse.VersionInfo")
	proto.RegisterType((*Reading)(nil), "synse.Reading")
	proto.RegisterType((*WriteInfo)(nil), "synse.WriteInfo")
	proto.RegisterType((*WriteData)(nil), "synse.WriteData")
	proto.RegisterType((*WriteResponse)(nil), "synse.WriteResponse")
	proto.RegisterType((*TransactionFilter)(nil), "synse.TransactionFilter")
	proto.RegisterType((*Transactions)(nil), "synse.Transactions")
	proto.RegisterType((*Device)(nil), "synse.Device")
	proto.RegisterType((*Location)(nil), "synse.Location")
	proto.RegisterType((*Output)(nil), "synse.Output")
	proto.RegisterType((*Unit)(nil), "synse.Unit")
	proto.RegisterEnum("synse.PluginHealth_Status", PluginHealth_Status_name, PluginHealth_Status_value)
	proto.RegisterEnum("synse.WriteResponse_WriteStatus", WriteResponse_WriteStatus_name, WriteResponse_WriteStatus_value)
	proto.RegisterEnum("synse.WriteResponse_WriteState", WriteResponse_WriteState_name, WriteResponse_WriteState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Plugin service

type PluginClient interface {
	// Test returns the status of the plugin. This call is intended to
	// be used in order to check if a plugin is reachable. The status
	// returned here designates plugin reachability, not plugin health.
	Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error)
	// Version returns the version info for the plugin. This is not used
	// by Synse Server, but can be used by the CLI/manual plugin interaction.
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionInfo, error)
	// Health returns the health status of a plugin.
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginHealth, error)
	// Capabilities returns the collection of capabilities that a plugin
	// exposes. More specifically, this means types of devices supported
	// and the readings supported for each of those devices.
	Capabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Plugin_CapabilitiesClient, error)
	// Devices gets info for all of the devices that the plugin manages.
	// This rpc call is the plugin's equivalent to a Synse Server scan.
	Devices(ctx context.Context, in *DeviceFilter, opts ...grpc.CallOption) (Plugin_DevicesClient, error)
	// Metainfo gets the metainfo for the plugin. This info provides details
	// about the plugin itself.
	Metainfo(ctx context.Context, in *DeviceFilter, opts ...grpc.CallOption) (Plugin_MetainfoClient, error)
	// Read returns the reading data for the specified device.
	Read(ctx context.Context, in *DeviceFilter, opts ...grpc.CallOption) (Plugin_ReadClient, error)
	// Write issues an asynchronous write command to the specified device.
	Write(ctx context.Context, in *WriteInfo, opts ...grpc.CallOption) (*Transactions, error)
	// Transactiong gets the state/status of an asynchronous write transaction.
	Transaction(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (Plugin_TransactionClient, error)
}

type pluginClient struct {
	cc *grpc.ClientConn
}

func NewPluginClient(cc *grpc.ClientConn) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) Test(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := grpc.Invoke(ctx, "/synse.Plugin/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := grpc.Invoke(ctx, "/synse.Plugin/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PluginHealth, error) {
	out := new(PluginHealth)
	err := grpc.Invoke(ctx, "/synse.Plugin/Health", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Capabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Plugin_CapabilitiesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plugin_serviceDesc.Streams[0], c.cc, "/synse.Plugin/Capabilities", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginCapabilitiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plugin_CapabilitiesClient interface {
	Recv() (*DeviceCapability, error)
	grpc.ClientStream
}

type pluginCapabilitiesClient struct {
	grpc.ClientStream
}

func (x *pluginCapabilitiesClient) Recv() (*DeviceCapability, error) {
	m := new(DeviceCapability)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginClient) Devices(ctx context.Context, in *DeviceFilter, opts ...grpc.CallOption) (Plugin_DevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plugin_serviceDesc.Streams[1], c.cc, "/synse.Plugin/Devices", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plugin_DevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type pluginDevicesClient struct {
	grpc.ClientStream
}

func (x *pluginDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginClient) Metainfo(ctx context.Context, in *DeviceFilter, opts ...grpc.CallOption) (Plugin_MetainfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plugin_serviceDesc.Streams[2], c.cc, "/synse.Plugin/Metainfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginMetainfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plugin_MetainfoClient interface {
	Recv() (*Metadata, error)
	grpc.ClientStream
}

type pluginMetainfoClient struct {
	grpc.ClientStream
}

func (x *pluginMetainfoClient) Recv() (*Metadata, error) {
	m := new(Metadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginClient) Read(ctx context.Context, in *DeviceFilter, opts ...grpc.CallOption) (Plugin_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plugin_serviceDesc.Streams[3], c.cc, "/synse.Plugin/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plugin_ReadClient interface {
	Recv() (*Reading, error)
	grpc.ClientStream
}

type pluginReadClient struct {
	grpc.ClientStream
}

func (x *pluginReadClient) Recv() (*Reading, error) {
	m := new(Reading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pluginClient) Write(ctx context.Context, in *WriteInfo, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := grpc.Invoke(ctx, "/synse.Plugin/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) Transaction(ctx context.Context, in *TransactionFilter, opts ...grpc.CallOption) (Plugin_TransactionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Plugin_serviceDesc.Streams[4], c.cc, "/synse.Plugin/Transaction", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginTransactionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Plugin_TransactionClient interface {
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type pluginTransactionClient struct {
	grpc.ClientStream
}

func (x *pluginTransactionClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Plugin service

type PluginServer interface {
	// Test returns the status of the plugin. This call is intended to
	// be used in order to check if a plugin is reachable. The status
	// returned here designates plugin reachability, not plugin health.
	Test(context.Context, *Empty) (*Status, error)
	// Version returns the version info for the plugin. This is not used
	// by Synse Server, but can be used by the CLI/manual plugin interaction.
	Version(context.Context, *Empty) (*VersionInfo, error)
	// Health returns the health status of a plugin.
	Health(context.Context, *Empty) (*PluginHealth, error)
	// Capabilities returns the collection of capabilities that a plugin
	// exposes. More specifically, this means types of devices supported
	// and the readings supported for each of those devices.
	Capabilities(*Empty, Plugin_CapabilitiesServer) error
	// Devices gets info for all of the devices that the plugin manages.
	// This rpc call is the plugin's equivalent to a Synse Server scan.
	Devices(*DeviceFilter, Plugin_DevicesServer) error
	// Metainfo gets the metainfo for the plugin. This info provides details
	// about the plugin itself.
	Metainfo(*DeviceFilter, Plugin_MetainfoServer) error
	// Read returns the reading data for the specified device.
	Read(*DeviceFilter, Plugin_ReadServer) error
	// Write issues an asynchronous write command to the specified device.
	Write(context.Context, *WriteInfo) (*Transactions, error)
	// Transactiong gets the state/status of an asynchronous write transaction.
	Transaction(*TransactionFilter, Plugin_TransactionServer) error
}

func RegisterPluginServer(s *grpc.Server, srv PluginServer) {
	s.RegisterService(&_Plugin_serviceDesc, srv)
}

func _Plugin_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.Plugin/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Test(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.Plugin/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.Plugin/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Capabilities_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServer).Capabilities(m, &pluginCapabilitiesServer{stream})
}

type Plugin_CapabilitiesServer interface {
	Send(*DeviceCapability) error
	grpc.ServerStream
}

type pluginCapabilitiesServer struct {
	grpc.ServerStream
}

func (x *pluginCapabilitiesServer) Send(m *DeviceCapability) error {
	return x.ServerStream.SendMsg(m)
}

func _Plugin_Devices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServer).Devices(m, &pluginDevicesServer{stream})
}

type Plugin_DevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type pluginDevicesServer struct {
	grpc.ServerStream
}

func (x *pluginDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

func _Plugin_Metainfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServer).Metainfo(m, &pluginMetainfoServer{stream})
}

type Plugin_MetainfoServer interface {
	Send(*Metadata) error
	grpc.ServerStream
}

type pluginMetainfoServer struct {
	grpc.ServerStream
}

func (x *pluginMetainfoServer) Send(m *Metadata) error {
	return x.ServerStream.SendMsg(m)
}

func _Plugin_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServer).Read(m, &pluginReadServer{stream})
}

type Plugin_ReadServer interface {
	Send(*Reading) error
	grpc.ServerStream
}

type pluginReadServer struct {
	grpc.ServerStream
}

func (x *pluginReadServer) Send(m *Reading) error {
	return x.ServerStream.SendMsg(m)
}

func _Plugin_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/synse.Plugin/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).Write(ctx, req.(*WriteInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_Transaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PluginServer).Transaction(m, &pluginTransactionServer{stream})
}

type Plugin_TransactionServer interface {
	Send(*WriteResponse) error
	grpc.ServerStream
}

type pluginTransactionServer struct {
	grpc.ServerStream
}

func (x *pluginTransactionServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Plugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "synse.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Plugin_Test_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Plugin_Version_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Plugin_Health_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Plugin_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capabilities",
			Handler:       _Plugin_Capabilities_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Devices",
			Handler:       _Plugin_Devices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Metainfo",
			Handler:       _Plugin_Metainfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Plugin_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Transaction",
			Handler:       _Plugin_Transaction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "synse.proto",
}

func init() { proto.RegisterFile("synse.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xf7, 0x7a, 0xed, 0xb5, 0x7d, 0xd6, 0xc9, 0xdf, 0xff, 0x69, 0x55, 0x56, 0x01, 0x11, 0xb3,
	0x6d, 0x90, 0xc5, 0x47, 0x28, 0x6e, 0x68, 0x0b, 0x48, 0x88, 0xb4, 0x76, 0x9b, 0xa8, 0x21, 0x09,
	0x43, 0xda, 0x8a, 0xab, 0x6a, 0xbc, 0x9e, 0xba, 0x43, 0xec, 0x5d, 0x6b, 0x67, 0x1c, 0xc9, 0xcf,
	0xc0, 0x4b, 0xf0, 0x00, 0x48, 0x88, 0x57, 0xe0, 0x96, 0x1b, 0xee, 0x78, 0x1d, 0x74, 0x66, 0x66,
	0xd7, 0xbb, 0x65, 0x45, 0x11, 0x77, 0x73, 0x7e, 0xf3, 0x3b, 0x1f, 0x73, 0xe6, 0xcc, 0x39, 0x03,
	0xbe, 0x5c, 0xc7, 0x92, 0xef, 0x2f, 0xd3, 0x44, 0x25, 0xa4, 0xa9, 0x85, 0xf0, 0x1c, 0xba, 0x23,
	0x7e, 0x25, 0x22, 0xfe, 0x48, 0xcc, 0x15, 0x4f, 0x09, 0x81, 0x46, 0xca, 0xa2, 0xcb, 0xc0, 0xe9,
	0x3b, 0x83, 0x0e, 0xd5, 0x6b, 0x72, 0x1d, 0x9a, 0x93, 0x84, 0xa5, 0xd3, 0xa0, 0xae, 0x41, 0x23,
	0x90, 0x1b, 0xe0, 0x4d, 0xb5, 0x66, 0xe0, 0x6a, 0xd8, 0x4a, 0x61, 0x0b, 0x9a, 0xe3, 0xc5, 0x52,
	0xad, 0xc3, 0x00, 0xbc, 0xef, 0x14, 0x53, 0x2b, 0x49, 0xb6, 0xa1, 0x9e, 0x18, 0x93, 0x6d, 0x5a,
	0x4f, 0x2e, 0xc3, 0x3f, 0x1c, 0xe8, 0x9e, 0xcf, 0x57, 0x33, 0x11, 0x1f, 0x71, 0x36, 0x57, 0xaf,
	0xc8, 0x3b, 0xd0, 0x51, 0x62, 0xc1, 0xa5, 0x62, 0x8b, 0xa5, 0x75, 0xbd, 0x01, 0xc8, 0x10, 0x3c,
	0xa9, 0x0d, 0xe9, 0x00, 0xb6, 0x87, 0x3b, 0xfb, 0xe6, 0x20, 0x45, 0x13, 0xfb, 0xc6, 0x15, 0xb5,
	0x4c, 0xf2, 0x01, 0x78, 0xd1, 0x2b, 0x1e, 0x5d, 0xca, 0xc0, 0xed, 0xbb, 0x03, 0x7f, 0x48, 0xac,
	0x8e, 0x61, 0x3f, 0xc4, 0x2d, 0x6a, 0x19, 0xe1, 0x83, 0x3c, 0x50, 0x1f, 0x5a, 0x4f, 0x4f, 0x9f,
	0x9c, 0x9e, 0x3d, 0x3f, 0xed, 0xd5, 0x88, 0x07, 0xf5, 0xb3, 0x27, 0x3d, 0x87, 0xdc, 0x00, 0x72,
	0x7e, 0x48, 0x2f, 0x8e, 0x0f, 0x4f, 0x4e, 0xbe, 0x7f, 0x31, 0x1a, 0x3f, 0xa6, 0x87, 0xa3, 0xf1,
	0xa8, 0xe7, 0x22, 0xf9, 0xd1, 0xe1, 0xf1, 0xc9, 0xf1, 0xe9, 0xe3, 0x5e, 0x23, 0x4c, 0xc0, 0x2f,
	0x98, 0xc6, 0x34, 0xc6, 0x6c, 0xc1, 0xb3, 0x34, 0xe2, 0xfa, 0x3f, 0x1d, 0x23, 0x80, 0xd6, 0x82,
	0x4b, 0xc9, 0x66, 0x59, 0x96, 0x33, 0x31, 0xfc, 0x1a, 0x7a, 0xe6, 0xe2, 0x1e, 0xb2, 0x25, 0x9b,
	0x88, 0xb9, 0x50, 0x6b, 0xf4, 0x7a, 0x29, 0xe2, 0x69, 0xe6, 0x15, 0xd7, 0x68, 0x21, 0x59, 0xa9,
	0xe5, 0x4a, 0xa1, 0x5b, 0x17, 0x2d, 0x58, 0x31, 0xfc, 0xc9, 0x81, 0xf6, 0x37, 0x5c, 0xb1, 0x29,
	0x53, 0xac, 0x32, 0xe0, 0x77, 0x01, 0x16, 0x4c, 0xc4, 0x8a, 0x89, 0x98, 0xa7, 0xf6, 0xf2, 0x0b,
	0x08, 0xe9, 0x83, 0x3f, 0xe5, 0x32, 0x4a, 0xc5, 0x52, 0x89, 0x24, 0xb6, 0x01, 0x16, 0x21, 0xd2,
	0x03, 0xf7, 0x2a, 0x92, 0x41, 0x43, 0xef, 0xe0, 0x92, 0x7c, 0x04, 0xad, 0x2b, 0x9e, 0x4a, 0xe4,
	0x37, 0xfb, 0x4e, 0xe1, 0x62, 0x9e, 0x19, 0xf4, 0x38, 0x7e, 0x99, 0xd0, 0x8c, 0x12, 0xfe, 0xee,
	0x80, 0x5f, 0xd8, 0x20, 0xb7, 0x60, 0x6b, 0xa9, 0xb3, 0x65, 0x41, 0x1b, 0x6e, 0x19, 0xc4, 0xb8,
	0xe5, 0xf4, 0x32, 0xa3, 0xd8, 0xb8, 0x37, 0x08, 0x56, 0xdb, 0x64, 0x25, 0xe6, 0xd3, 0x11, 0x53,
	0x59, 0x5a, 0x37, 0x00, 0xee, 0xce, 0x84, 0x7a, 0x98, 0x2c, 0x16, 0x42, 0xd9, 0xc8, 0x37, 0x00,
	0x56, 0xfd, 0x4c, 0xa8, 0x0b, 0x36, 0xd3, 0xe1, 0x77, 0xa8, 0x95, 0x30, 0x7f, 0x2c, 0x8d, 0x5e,
	0x05, 0x9e, 0xc9, 0x1f, 0xae, 0x75, 0xd9, 0xcb, 0xa0, 0xa5, 0x91, 0x7a, 0x22, 0xc3, 0x1f, 0x5d,
	0x68, 0x51, 0xce, 0xa6, 0x22, 0x9e, 0xbd, 0xa1, 0xe2, 0x09, 0x34, 0xd4, 0x7a, 0xc9, 0x6d, 0xec,
	0x7a, 0x4d, 0x6e, 0x42, 0x57, 0xaa, 0x54, 0xc4, 0xb3, 0x17, 0x57, 0x6c, 0xbe, 0xb2, 0x81, 0x1f,
	0xd5, 0xa8, 0x6f, 0xd0, 0x67, 0x08, 0x92, 0x5d, 0x80, 0x49, 0x92, 0xcc, 0x2d, 0x05, 0xa3, 0x6f,
	0x1f, 0xd5, 0x68, 0x07, 0x31, 0x43, 0xd8, 0x83, 0xad, 0x97, 0xf3, 0x84, 0xa9, 0x3b, 0x43, 0xcb,
	0xc1, 0x63, 0xd4, 0x8f, 0x6a, 0xb4, 0x6b, 0xe1, 0x32, 0xed, 0xee, 0x81, 0xa5, 0xe1, 0xb9, 0x9c,
	0x9c, 0x76, 0xf7, 0xc0, 0xd0, 0xde, 0x03, 0x5f, 0xc4, 0x1b, 0x5b, 0x78, 0xd4, 0xe6, 0x51, 0x8d,
	0x82, 0x06, 0x8b, 0x94, 0xdc, 0x4e, 0xbb, 0xef, 0x0c, 0x5c, 0x4b, 0x29, 0x58, 0x99, 0xac, 0x15,
	0x97, 0x96, 0xd2, 0xe9, 0x3b, 0x83, 0x2e, 0x52, 0x34, 0x68, 0x28, 0x37, 0xa1, 0xbb, 0x2a, 0x7a,
	0x82, 0xbe, 0x33, 0xd8, 0xc2, 0xc3, 0xaf, 0x0a, 0xae, 0x2c, 0x29, 0xf7, 0xe5, 0xf7, 0x9d, 0x41,
	0x23, 0x23, 0x59, 0x67, 0x0f, 0x5a, 0xd0, 0xd4, 0xbb, 0xe1, 0x0f, 0xd0, 0x79, 0x9e, 0x0a, 0xc5,
	0x75, 0x61, 0xdd, 0x83, 0xee, 0xb4, 0xd0, 0x06, 0xf5, 0x8d, 0xf8, 0xc3, 0x6b, 0xb6, 0x36, 0x8b,
	0x1d, 0x92, 0x96, 0x88, 0xe4, 0x16, 0x34, 0xf0, 0xfd, 0xe8, 0xb7, 0xe5, 0x0f, 0x7b, 0x56, 0x41,
	0x1b, 0x1e, 0x31, 0xc5, 0xa8, 0xde, 0x0d, 0xef, 0x59, 0x5f, 0x08, 0x61, 0x09, 0xb1, 0x48, 0x6d,
	0xaa, 0xd7, 0x4a, 0x78, 0xe9, 0xd6, 0x94, 0x33, 0xe8, 0x5a, 0xc5, 0x5f, 0xea, 0xb0, 0xa5, 0x35,
	0x29, 0x97, 0xcb, 0x24, 0x96, 0x1c, 0xdf, 0x73, 0x94, 0x72, 0xa6, 0x78, 0xf6, 0xcc, 0x33, 0x11,
	0x77, 0x56, 0xcb, 0xa9, 0xde, 0x31, 0x75, 0x93, 0x89, 0xe4, 0x7e, 0xde, 0x79, 0x5c, 0xdd, 0x79,
	0xfa, 0xc5, 0x30, 0x33, 0xcb, 0x46, 0x7a, 0xad, 0xff, 0x7c, 0x06, 0x4d, 0x5c, 0x99, 0x52, 0xda,
	0x1e, 0xee, 0xfe, 0xb3, 0x22, 0xa7, 0x86, 0x5d, 0x6c, 0x5b, 0xcd, 0x72, 0xdb, 0xfa, 0x0a, 0xfc,
	0x82, 0x9f, 0x72, 0xc3, 0xf5, 0xa1, 0x75, 0x3e, 0x3e, 0x1d, 0x61, 0x43, 0x75, 0x50, 0x78, 0x4e,
	0x8f, 0x2f, 0x50, 0xa8, 0x93, 0x36, 0x34, 0x46, 0x67, 0xa7, 0xe3, 0x9e, 0x1b, 0xee, 0x02, 0x6c,
	0xdc, 0xd9, 0x16, 0x5d, 0x23, 0x1d, 0x68, 0x8e, 0x29, 0x3d, 0xa3, 0x3d, 0x27, 0xbc, 0x09, 0xff,
	0xbf, 0x48, 0x59, 0x2c, 0x4d, 0x52, 0xed, 0x2d, 0x6d, 0x43, 0x5d, 0x64, 0xf9, 0xaa, 0x8b, 0x69,
	0xf8, 0xb3, 0x03, 0xdd, 0x02, 0x4b, 0x92, 0x63, 0xe8, 0xaa, 0x82, 0x1c, 0x38, 0xfa, 0x3a, 0xf7,
	0xec, 0x71, 0x8b, 0xd4, 0x92, 0x30, 0x8e, 0x55, 0xba, 0xa6, 0x25, 0xd5, 0x9d, 0x6f, 0x4b, 0x01,
	0x18, 0x0a, 0x36, 0xc2, 0x4b, 0xbe, 0xb6, 0x11, 0xe0, 0x92, 0xbc, 0x6f, 0xeb, 0x50, 0xdf, 0x55,
	0x55, 0xe5, 0x98, 0xed, 0x2f, 0xea, 0xf7, 0x9d, 0xf0, 0xb7, 0x3a, 0x78, 0xa6, 0x06, 0xdf, 0xd0,
	0x37, 0x7a, 0xe0, 0xae, 0x44, 0x76, 0xfd, 0xb8, 0xcc, 0x47, 0x82, 0x5b, 0x18, 0x09, 0xf7, 0xa0,
	0xbd, 0xb0, 0x7d, 0x3f, 0x68, 0xe8, 0x83, 0xbe, 0x5d, 0x2a, 0xf4, 0xfd, 0x6c, 0x2a, 0x98, 0xe3,
	0xe5, 0x64, 0xac, 0x5c, 0xd3, 0x69, 0xb3, 0xe6, 0x67, 0x24, 0x74, 0x22, 0xe2, 0x97, 0x49, 0xd6,
	0xfc, 0x70, 0x4d, 0x3e, 0x84, 0xf6, 0x3c, 0x89, 0x98, 0xae, 0xf3, 0x96, 0x3e, 0xe2, 0xff, 0xac,
	0x93, 0x13, 0x0b, 0xd3, 0x9c, 0x40, 0xf6, 0xc0, 0x33, 0x53, 0x29, 0x68, 0xeb, 0x78, 0xb6, 0x2c,
	0xf5, 0x4c, 0x83, 0xd4, 0x6e, 0xee, 0x7c, 0x09, 0x5b, 0xa5, 0xd0, 0x2a, 0xd2, 0x7a, 0xbd, 0x98,
	0xd6, 0x4e, 0x31, 0x89, 0x07, 0xd0, 0xce, 0x3c, 0xff, 0xfb, 0x5f, 0x4e, 0xf8, 0xab, 0x03, 0x9e,
	0x89, 0xa2, 0x72, 0x44, 0x56, 0x35, 0xea, 0x1d, 0x68, 0x63, 0x84, 0x17, 0x88, 0x9b, 0xb4, 0xe7,
	0x32, 0x5e, 0xdf, 0x32, 0xe5, 0x91, 0xd0, 0x93, 0x09, 0xdf, 0x54, 0x93, 0x6e, 0x00, 0x1c, 0x6f,
	0x32, 0x62, 0x73, 0x11, 0xcf, 0x1e, 0xb1, 0x48, 0x25, 0xa9, 0x4e, 0xb3, 0x43, 0xcb, 0x20, 0xd9,
	0x85, 0xc6, 0x2a, 0x16, 0x4a, 0x67, 0xdb, 0x1f, 0xfa, 0x36, 0x55, 0x4f, 0x63, 0xa1, 0xa8, 0xde,
	0x08, 0x87, 0xd0, 0x40, 0xa9, 0x32, 0xe0, 0x1b, 0xe0, 0xc9, 0xf5, 0x62, 0x92, 0xcc, 0x6d, 0xc8,
	0x56, 0x1a, 0xfe, 0xe9, 0x82, 0x67, 0x3e, 0x22, 0x64, 0x0f, 0x1a, 0x17, 0x5c, 0x2a, 0xd2, 0xb5,
	0x96, 0xf5, 0x6f, 0x6e, 0x27, 0xbb, 0x12, 0xf3, 0x70, 0xc3, 0x1a, 0xf9, 0x18, 0x5a, 0xd9, 0x40,
	0x2d, 0x33, 0x2b, 0x26, 0xba, 0xa6, 0x7b, 0xf6, 0xb3, 0x57, 0x66, 0x5f, 0xab, 0xf8, 0x05, 0x85,
	0x35, 0xf2, 0x39, 0x74, 0xf3, 0x8f, 0x8d, 0xe0, 0xf2, 0x35, 0xa5, 0xb7, 0x4a, 0xf5, 0xba, 0xf9,
	0x01, 0x85, 0xb5, 0xdb, 0x0e, 0xf9, 0x14, 0x5a, 0x06, 0x97, 0xa4, 0xaa, 0x81, 0xe7, 0x27, 0x31,
	0xa0, 0x56, 0x39, 0x30, 0x3f, 0x21, 0x5d, 0xb8, 0x95, 0x3a, 0x59, 0xed, 0x66, 0xe5, 0xa7, 0xb5,
	0x3e, 0x81, 0x06, 0x8e, 0xf3, 0x6a, 0x8d, 0x6d, 0x0b, 0xda, 0x81, 0xaf, 0x15, 0x6e, 0x43, 0x53,
	0xbf, 0x6f, 0x52, 0x7a, 0xed, 0x98, 0xa0, 0x3c, 0x0d, 0xc5, 0xd6, 0x11, 0xd6, 0xc8, 0x21, 0xf8,
	0x05, 0x84, 0x04, 0x7f, 0x67, 0x59, 0x77, 0xd7, 0xab, 0x3a, 0x33, 0x3a, 0x9d, 0x78, 0xfa, 0xbf,
	0x7f, 0xe7, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x09, 0xb4, 0x13, 0xfe, 0x0b, 0x00, 0x00,
}
